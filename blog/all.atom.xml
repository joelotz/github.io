<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Delving into Delusion</title><link href="http://www.joelotz.com/" rel="alternate"></link><link href="http://www.joelotz.com/blog/all.atom.xml" rel="self"></link><id>http://www.joelotz.com/</id><updated>2021-08-10T00:00:00+05:30</updated><entry><title>Exporting OSM Data into Python Dataframe</title><link href="http://www.joelotz.com/blog/2021/exporting-osm-data-into-python-dataframe.html" rel="alternate"></link><published>2021-08-10T00:00:00+05:30</published><updated>2021-08-10T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2021-08-10:/blog/2021/exporting-osm-data-into-python-dataframe.html</id><summary type="html">&lt;p&gt;In this post I am documenting how I exported OpenStreetMap (&lt;span class="caps"&gt;OSM&lt;/span&gt;) data into a Python dataframe for inspection. The use case for this task is the following: in &lt;span class="caps"&gt;OSM&lt;/span&gt; I have added all the schools in my area along with a list of tags. Because it took a couple days …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post I am documenting how I exported OpenStreetMap (&lt;span class="caps"&gt;OSM&lt;/span&gt;) data into a Python dataframe for inspection. The use case for this task is the following: in &lt;span class="caps"&gt;OSM&lt;/span&gt; I have added all the schools in my area along with a list of tags. Because it took a couple days and I evolved the process along the way, I’m not confident that the tags are consistent or completely accurate. To audit in &lt;span class="caps"&gt;OSM&lt;/span&gt; is difficult because I would need to select each school, then scroll through and maybe take a screenshot&amp;#8230;it’s just a mess. Having all the data in a tabular format would just be super&amp;nbsp;efficient. &lt;/p&gt;
&lt;p&gt;Here is an example of the value/keys or “tag data” assigned to a particular elementary school. Notice there are 21 different tags, but this is not a set value, it could be a different number for a different&amp;nbsp;school. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Original view of the data in OSM" src="/images/2021/osm2python_01.png"&gt;&lt;/p&gt;
&lt;h2&gt;Overpass-Turbo&lt;/h2&gt;
&lt;p&gt;First of all, there are different &lt;span class="caps"&gt;OSM&lt;/span&gt; tools depending on what you want to do. For example, the most popular and diverse is rendering data. There are dozens of different apps and websites that do this. The most generic is https://www.openstreetmap.org/. Then, if you want to add or edit data within the &lt;span class="caps"&gt;OSM&lt;/span&gt; database you can use web-based iD, &lt;span class="caps"&gt;JOSM&lt;/span&gt;, various apps, etc. If you want to query data, there are libraries for your favorite language, but the only method that I have any workable knowledge with is the web-based&amp;nbsp;https://overpass-turbo.eu/. &lt;/p&gt;
&lt;p&gt;With Overpass-Turbo is a front-end to the Overpass &lt;span class="caps"&gt;API&lt;/span&gt; and has a query-wizard which makes it quite beginner&amp;nbsp;friendly.  &lt;/p&gt;
&lt;h3&gt;Query Your&amp;nbsp;Data&lt;/h3&gt;
&lt;p&gt;There are plenty of tutorials on using overpass-turbo, including the &lt;a href="https://wiki.openstreetmap.org/wiki/Overpass_turbo"&gt;wiki&lt;/a&gt;, but as a very quick&amp;nbsp;primer&amp;#8230;&lt;/p&gt;
&lt;p&gt;You can create a query via the wizard by clicking “Wizard”, enter your string query, then ( click “build query” and “Run”) or ( click “build and run&amp;nbsp;query”).  &lt;/p&gt;
&lt;p&gt;&lt;img alt="osm2python_02" src="/images/2021/osm2python_02.png"&gt;&lt;/p&gt;
&lt;p&gt;The query language is &lt;a href="https://wiki.openstreetmap.org/wiki/Overpass_API/Language_Guide"&gt;Overpass &lt;span class="caps"&gt;QL&lt;/span&gt;&lt;/a&gt; and the wizard-generated query is on the left panel and the map or data results are on the right&amp;nbsp;panel. &lt;/p&gt;
&lt;p&gt;&lt;img alt="osm2python_03" src="/images/2021/osm2python_03.png"&gt;&lt;/p&gt;
&lt;p&gt;The map results are the actual shape but in zoomed out revert to a circle. If you click on the result it shows you all the tags, as shown&amp;nbsp;below. &lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2021/osm2python_03b.png" alt="osm2python_03b" style="zoom:40%;" /&gt;&lt;/p&gt;
&lt;p&gt;On the right-hand panel, you can also click the “Data” tab to see the &lt;span class="caps"&gt;JSON&lt;/span&gt; data of the&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/2021/osm2python_05.png" alt="osm2python_05" style="zoom:40%;" /&gt;&lt;/p&gt;
&lt;h3&gt;Save The&amp;nbsp;Results&lt;/h3&gt;
&lt;p&gt;But! What we ultimately want is just the data under “tags” for each result. There are a plethora of options, like outputting to csv, json, xml or filtering the output to specific fields. The easiest (for me) for this use-case is to simply filter the output to just show the&amp;nbsp;“tags”. &lt;/p&gt;
&lt;p&gt;To begin with, I commented out the nodes and relations because I only want the ways. The next step is to replace &lt;code&gt;out body;&lt;/code&gt; with &lt;code&gt;out tags;&lt;/code&gt;. “tags” is a prebuilt key that outputs all the tags.  See the difference of output in the right-hand panel. To complete this step, save the&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;&lt;img alt="osm2python_04" src="/images/2021/osm2python_04.png"&gt;&lt;/p&gt;
&lt;h2&gt;Python to the&amp;nbsp;Rescue&lt;/h2&gt;
&lt;p&gt;Python can be used to read the json file into a dataframe. I’m not convinced this is the most pythonic or efficient code, but it&amp;nbsp;works.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schools.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Read turbo-overpass output file&lt;/span&gt;

&lt;span class="c1"&gt;# This is a bit hacky... I need to pull out the second-level data&lt;/span&gt;
&lt;span class="n"&gt;tempdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;elements&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="n"&gt;school&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterrows&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;test1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;school&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;school&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;school&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Let&amp;#39;s look at it&lt;/span&gt;
&lt;span class="n"&gt;school&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_excel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output.xlsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Send it to an Excel sheet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For this I used a &lt;a href="https://jupyter.org/"&gt;Jupyter Notebook&lt;/a&gt;. Here is my&amp;nbsp;output.&lt;/p&gt;
&lt;p&gt;&lt;img alt="osm2python_06" src="/images/2021/osm2python_06.png"&gt;&lt;/p&gt;
&lt;p&gt;This already is awesome! I can clearly see that the school on the bottom does not have a Facebook page, but for some ungodly reason has a fax number. What is even cooler is that I slipped in code to export all this to Excel. Check out the last line of the code&amp;nbsp;above. &lt;/p&gt;
&lt;p&gt;&lt;img alt="osm2python_07" src="/images/2021/osm2python_07.png"&gt;&lt;/p&gt;
&lt;p&gt;This is the final result. From here I can sort, filter, and search. For example, all schools should have a phone number, so I can identify those that do not easily and add&amp;nbsp;it.&lt;/p&gt;</content><category term="misc"></category><category term="OpenStreetMap(OSM)"></category><category term="Python"></category></entry><entry><title>Importing Garmin 245 Watch GPX File into Openstreetmap as Traces</title><link href="http://www.joelotz.com/blog/2021/importing-garmin-245-watch-gpx-file-into-openstreetmap-as-traces.html" rel="alternate"></link><published>2021-06-10T00:00:00+05:30</published><updated>2021-06-10T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2021-06-10:/blog/2021/importing-garmin-245-watch-gpx-file-into-openstreetmap-as-traces.html</id><summary type="html">&lt;p&gt;I have a Garmin 245 watch that I use for trail running. What I wanted to do was update/add trails in &lt;a href="https://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt; based on the gps data of where I ran. This post will document the procedures for downloading a &lt;a href="https://en.wikipedia.org/wiki/GPS_Exchange_Format"&gt;gpx file&lt;/a&gt; file created by the Garmin watch and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a Garmin 245 watch that I use for trail running. What I wanted to do was update/add trails in &lt;a href="https://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt; based on the gps data of where I ran. This post will document the procedures for downloading a &lt;a href="https://en.wikipedia.org/wiki/GPS_Exchange_Format"&gt;gpx file&lt;/a&gt; file created by the Garmin watch and importing it into OpenStreetMap (&lt;span class="caps"&gt;OSM&lt;/span&gt;).&lt;/p&gt;
&lt;h3&gt;Create &lt;span class="caps"&gt;GPX&lt;/span&gt;&amp;nbsp;File&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m not going to go to far into this first topic. I&amp;#8217;m going to assume you know how to create and save an &amp;#8220;activity&amp;#8221; on your watch. For Garmin, &lt;a href="https://www8.garmin.com/manuals/webhelp/forerunner245/EN-US/GUID-2AE86593-AC85-4368-907C-9C6EEE28FD11.html"&gt;specifically my 245&lt;/a&gt;, I record my&amp;nbsp;run. &lt;/p&gt;
&lt;h3&gt;Download &lt;span class="caps"&gt;GPX&lt;/span&gt; File from Garmin&amp;nbsp;Connect&lt;/h3&gt;
&lt;p&gt;On your computer browse to &lt;a href="https://connect.garmin.com/"&gt;https://connect.garmin.com/&lt;/a&gt; and sign into your account. Open the left-side panel and under the ‘Activities’ section select ‘All&amp;nbsp;Activities’.&lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_01" src="/images/2021/garmin_01.png"&gt;&lt;/p&gt;
&lt;p&gt;Select the “Activity” or the run that you want to&amp;nbsp;export.&lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_02" src="/images/2021/garmin_02.png"&gt;&lt;/p&gt;
&lt;p&gt;After opening the run you see a map and the trace. To download, click the gear icon in the upper-right and select “Export to &lt;span class="caps"&gt;GPX&lt;/span&gt;”. Save the file somewhere on your&amp;nbsp;computer. &lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_03" src="/images/2021/garmin_03.png"&gt;&lt;/p&gt;
&lt;h4&gt;Importing &lt;span class="caps"&gt;GPX&lt;/span&gt; into &lt;span class="caps"&gt;OSM&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;The easiest way to see the gpx file in &lt;span class="caps"&gt;OSM&lt;/span&gt; is to simply drag and drop the file. Open &lt;a href="https://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt; in your browser. Click the edit button which opens the iD&amp;nbsp;Editor. &lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_04" src="/images/2021/garmin_04.png"&gt;&lt;/p&gt;
&lt;p&gt;From here, simply (and literally) drag the .gpx file into the browser window. The run will show as a pink&amp;nbsp;trace. &lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_05" src="/images/2021/garmin_05.png"&gt;&lt;/p&gt;
&lt;p&gt;Another method is to upload the trace into the &lt;span class="caps"&gt;OSM&lt;/span&gt; database for everyone to view and use. From the iD Editor click on &amp;#8220;&lt;span class="caps"&gt;GPS&lt;/span&gt;&amp;nbsp;Traces&amp;#8221;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_06" src="/images/2021/garmin_06.png"&gt;&lt;/p&gt;
&lt;p&gt;This will take you to the &lt;span class="caps"&gt;OSM&lt;/span&gt; Trace Upload page. Click “Upload a&amp;nbsp;trace”&lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_07" src="/images/2021/garmin_07.png"&gt;&lt;/p&gt;
&lt;p&gt;Then select your gpx file and enter the details as&amp;nbsp;appropriate.&lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_08" src="/images/2021/garmin_08a.png"&gt;&lt;/p&gt;
&lt;p&gt;After uploading, you&amp;#8217;ll need to wait 1-2 minutes, at the most, for the system to enter the trace into the&amp;nbsp;database.&lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_09" src="/images/2021/garmin_09a.png"&gt;&lt;/p&gt;
&lt;p&gt;Refresh the webpage and you&amp;#8217;ll see a list of all your uploaded traces. Select “Edit Map” to open the trace in &lt;span class="caps"&gt;OSM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_10" src="/images/2021/garmin_10.png"&gt;&lt;/p&gt;
&lt;p&gt;The results are the same as drag and dropping but now if someone turns on the &lt;span class="caps"&gt;GPS&lt;/span&gt; Trace layer they will see your traces. One thing you can do is draw over your gpx trace and create a path or&amp;nbsp;trail. &lt;/p&gt;
&lt;p&gt;&lt;img alt="garmin_11" src="/images/2021/garmin_11.png"&gt;&lt;/p&gt;</content><category term="misc"></category><category term="OpenStreetMap(OSM)"></category></entry><entry><title>Welcome to arbbt, Your OCD Time Tracker</title><link href="http://www.joelotz.com/blog/2021/welcome-to-arbbt-your-ocd-time-tracker.html" rel="alternate"></link><published>2021-02-09T00:00:00+05:30</published><updated>2021-02-09T00:00:00+05:30</updated><author><name>Joe Lotz</name></author><id>tag:www.joelotz.com,2021-02-09:/blog/2021/welcome-to-arbbt-your-ocd-time-tracker.html</id><summary type="html">&lt;p&gt;arbtt
  ~ The Automatic Rule-Based Time&amp;nbsp;Tracker&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m applying for a graduate program and in the meantime, while my application is being considered, I&amp;#8217;ve started building out my &lt;a href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; thesis template and workflow. I know it&amp;#8217;s premature but I haven&amp;#8217;t played with LaTeX since writing my Master …&lt;/p&gt;</summary><content type="html">&lt;p&gt;arbtt
  ~ The Automatic Rule-Based Time&amp;nbsp;Tracker&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m applying for a graduate program and in the meantime, while my application is being considered, I&amp;#8217;ve started building out my &lt;a href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; thesis template and workflow. I know it&amp;#8217;s premature but I haven&amp;#8217;t played with LaTeX since writing my Master&amp;#8217;s Thesis nearly 15 years ago and wanted to reacquaint myself. After a couple of days, I was thinking to myself, &amp;#8220;man, after the end of this I&amp;#8217;m going to have a bunch of hours racked up.&amp;#8221; So that thought experiment led me to look at time tracking&amp;nbsp;software. &lt;/p&gt;
&lt;p&gt;The one I thought was the &amp;#8220;best&amp;#8221; was &lt;a href="http://arbtt.nomeata.de/#what"&gt;arbtt&lt;/a&gt;, &lt;strong&gt;&lt;u&gt;a&lt;/u&gt;&lt;/strong&gt;utomated, &lt;strong&gt;&lt;u&gt;r&lt;/u&gt;&lt;/strong&gt;ule-&lt;strong&gt;&lt;u&gt;b&lt;/u&gt;&lt;/strong&gt;ased &lt;strong&gt;&lt;u&gt;t&lt;/u&gt;&lt;/strong&gt;ime &lt;strong&gt;&lt;u&gt;t&lt;/u&gt;&lt;/strong&gt;racker.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Installation was very&amp;nbsp;easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update
sudo apt-get install arbtt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tell Ubuntu to start the daemon automatically on system&amp;nbsp;start&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cp /usr/share/doc/arbtt/examples/arbtt-capture.desktop ~/.config/autostart/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go ahead and manually start the&amp;nbsp;daemon&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;arbtt-capture &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And create your categorize.cfg&amp;nbsp;file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/.arbtt/categorize.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#8217;s&amp;nbsp;it&lt;/p&gt;
&lt;h3&gt;Categorization&lt;/h3&gt;
&lt;p&gt;This is where the magic is. &lt;code&gt;arbtt&lt;/code&gt; tracks X properties like window title, class, and running programs, and you write rules to classify those strings. You can get as detailed as you want. For example, you can say &amp;#8220;If Firefox is the active window (i.e. mouse or keyboard is working within it) and the title of the tab contains the word Twitter, than label all that accumulated time as Web_Twitter&amp;#8221;. Something like that. Then you can apply regular expressions and complicated logic to figure out exactly what you&amp;nbsp;want. &lt;/p&gt;
&lt;p&gt;For a start, here are my “rules” in the &lt;code&gt;categorization.cfg&lt;/code&gt; file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- A rule that probably everybody wants. Being inactive for over a minute&lt;/span&gt;
&lt;span class="c1"&gt;-- causes this sample to be ignored by default.&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;idle&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;inactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="c1"&gt;-- Simple rule that just tags the current program&lt;/span&gt;
&lt;span class="c1"&gt;--tag Program:$current.program,&lt;/span&gt;
&lt;span class="c1"&gt;--tag Title:$current.title,&lt;/span&gt;

&lt;span class="c1"&gt;-- PYTHON&lt;/span&gt;
&lt;span class="nf"&gt;current&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Spyder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;


&lt;span class="c1"&gt;-- THESIS&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;evince&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dissertation&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;thesis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="nf"&gt;current&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;thesis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;install4j&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yEd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;thesis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;


&lt;span class="c1"&gt;-- WEB BROWSER&lt;/span&gt;
&lt;span class="nf"&gt;current&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;LinkedIn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;Twitter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="kt"&gt;Web:&lt;/span&gt;&lt;span class="n"&gt;socialmedia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="nf"&gt;current&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Navigator&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;LinkedIn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;Twitter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="kt"&gt;Web:&lt;/span&gt;&lt;span class="n"&gt;web_browsing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’m basically tracking three things; how much time I’m coding Python, working on my thesis, and wasting on social media. I was able to do this by just looking at the example file and trial-and-error. Then I can view the&amp;nbsp;results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;joe@Praimfaya:~$ arbtt-stats
Processing data &lt;span class="o"&gt;[================================================================================]&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;%
Total &lt;span class="nb"&gt;time&lt;/span&gt; per &lt;span class="nv"&gt;tag&lt;/span&gt;
&lt;span class="o"&gt;==================&lt;/span&gt;
_____________Tag_&lt;span class="p"&gt;|&lt;/span&gt;______Time_&lt;span class="p"&gt;|&lt;/span&gt;_Percentage_
Web:web_browsing &lt;span class="p"&gt;|&lt;/span&gt;  1h33m00s &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="m"&gt;27&lt;/span&gt;.43
          python &lt;span class="p"&gt;|&lt;/span&gt;    45m00s &lt;span class="p"&gt;|&lt;/span&gt;      &lt;span class="m"&gt;13&lt;/span&gt;.27
          thesis &lt;span class="p"&gt;|&lt;/span&gt;    12m00s &lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="m"&gt;3&lt;/span&gt;.54
 Web:socialmedia &lt;span class="p"&gt;|&lt;/span&gt;     7m00s &lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;.06
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cool!&lt;/p&gt;
&lt;h3&gt;Taking it too far =&amp;nbsp;arbtt-graph&lt;/h3&gt;
&lt;p&gt;Of course, I will take it too far. There is an add-on names &lt;a href="https://github.com/rejuvyesh/arbtt-graph"&gt;arbtt-graph&lt;/a&gt; that will take the data collected and serve a webpage with it all graphed out. Installation consisted of cloning the github repo and configuring the scripts. The workflow is to run the &lt;code&gt;update&lt;/code&gt; bash script which dumps the arbtt-stats data into &lt;code&gt;.csv&lt;/code&gt; files and then runs a python script to process the data and manipulate it into a &lt;code&gt;json&lt;/code&gt; file. Then you run a python script that simply initiates a web server to display the html files from the “render”&amp;nbsp;folder.&lt;/p&gt;
&lt;p&gt;I ran into two problems that needed to be&amp;nbsp;fixed. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I don’t know if I had set it up wrong, but it didn’t like it when I had tags without categories. Meaning you can have tags like Web:general and Web:socialmedia, where “Web” was the category and “general” was the sub-tag. The python script assumed I would always have a category and barfed when I didn’t. I fixed this with try/catch&amp;nbsp;blocks. &lt;/li&gt;
&lt;li&gt;I was greedy a combined the update and serving steps into a single bash file in path, so I could just call &lt;code&gt;timestats.sh&lt;/code&gt; and update would get ran, a server is started on localhost, and a firefox tab is opened to the right page. The problem was all the files in arbtt-graph used relative paths so if I called from a random terminal directory it would barf again. I fixed by going into both python and bash scripts and changing to a absolute paths. This needs to be cleaned up and changed to directory variables because any change to the location and everything is screwed up again. But I was glad everything (arbtt-stats and -graph) was working so I left it&amp;nbsp;alone.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s what it looks like with my nominal&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;&lt;img alt="First day, several hours usage" src="/images/2021/arbtt_00.png"&gt;&lt;/p&gt;</content><category term="misc"></category><category term="arbtt"></category><category term="Python"></category></entry><entry><title>Removing DRM from Barnes&amp;Nobles .epub Books</title><link href="http://www.joelotz.com/blog/2021/removing-drm-from-barnesnobles-epub-books.html" rel="alternate"></link><published>2021-01-30T00:00:00+05:30</published><updated>2021-01-30T00:00:00+05:30</updated><author><name>Joe Lotz</name></author><id>tag:www.joelotz.com,2021-01-30:/blog/2021/removing-drm-from-barnesnobles-epub-books.html</id><summary type="html">&lt;p&gt;Important
 ~ These instructions are intended to be used with books that you &lt;em&gt;legally&lt;/em&gt; purchased from B&amp;amp;N and are trying to backup. Don&amp;#8217;t get me in&amp;nbsp;trouble!&lt;/p&gt;
&lt;p&gt;These instructions are adopted from Aric Renzo at &lt;a href="https://www.aricrenzo.com/2019-12-13-Liberate-Your-Nook-Ebooks/"&gt;https://www.aricrenzo.com/2019-12-13-Liberate-Your-Nook-Ebooks/&lt;/a&gt; and are intended to fill in the gaps and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Important
 ~ These instructions are intended to be used with books that you &lt;em&gt;legally&lt;/em&gt; purchased from B&amp;amp;N and are trying to backup. Don&amp;#8217;t get me in&amp;nbsp;trouble!&lt;/p&gt;
&lt;p&gt;These instructions are adopted from Aric Renzo at &lt;a href="https://www.aricrenzo.com/2019-12-13-Liberate-Your-Nook-Ebooks/"&gt;https://www.aricrenzo.com/2019-12-13-Liberate-Your-Nook-Ebooks/&lt;/a&gt; and are intended to fill in the gaps and/or clarify some steps for total noobs like myself. I am not smart enough to figure these out and all thanks and appreciation go to&amp;nbsp;him. &lt;/p&gt;
&lt;p&gt;I’ve rearranged the order of operations from Aric to put the most difficult (&lt;span class="caps"&gt;IMO&lt;/span&gt;) steps in the beginning. This way, if you fail there is no sense in doing the other easier&amp;nbsp;steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Android Studio and Android Studio &lt;span class="caps"&gt;SDK&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Spin up a virtual android&amp;nbsp;device&lt;/li&gt;
&lt;li&gt;Check if you have root&amp;nbsp;access!&lt;/li&gt;
&lt;li&gt;Install B&amp;amp;N eReader app on the virtual&amp;nbsp;device&lt;/li&gt;
&lt;li&gt;Log-in to the eReader and download your desired&amp;nbsp;book&lt;/li&gt;
&lt;li&gt;Go into root shell and pull out the book and encryption&amp;nbsp;hash&lt;/li&gt;
&lt;li&gt;Install&amp;nbsp;Calibre&lt;/li&gt;
&lt;li&gt;Install DeDRM plug-in for&amp;nbsp;Calibre&lt;/li&gt;
&lt;li&gt;Remove &lt;span class="caps"&gt;DRM&lt;/span&gt; from&amp;nbsp;book&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 1. Install Android Studio and Android Studio &lt;span class="caps"&gt;SDK&lt;/span&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/studio/"&gt;Download&lt;/a&gt; the .zip package for Android Studio for Linux. Save it somewhere like in your Downloads directory. At the time of writing I downloaded version&amp;nbsp;201.7042882.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Android Studio Download at &amp;lt;https://developer.android.com/studio/&amp;gt;" src="/images/2021/DRM_01.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It’s generally a good practice to verify the checksum. Scroll down to the download area to find it. This was&amp;nbsp;mine.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Android Studio SHA-256 Checksum" src="/images/2021/DRM_02.png"&gt;&lt;/p&gt;
&lt;p&gt;I usually just look at the last 4-5 digits to&amp;nbsp;verify.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cd into directory where the download&amp;nbsp;is&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sha256sum &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Compare the last 4-5 digits against the sha provided from the&amp;nbsp;source&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="/images/2021/DRM_03.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can follow the installation instructions here &amp;#8212;&amp;nbsp;https://developer.android.com/studio/install#Linux.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the .tar.gz file into &lt;code&gt;/usr/local/&lt;/code&gt; directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Uncompress&amp;nbsp;it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember you will need root access to be messing around in &lt;code&gt;/usr/local&lt;/code&gt;
&lt;img alt="" src="/images/2021/DRM_04.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you are running 64-bit linux you will need to install some 32-bit libraries to make it work well. At least according to the&amp;nbsp;instructions.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;How do you know if you are running 64-bit? Type &lt;code&gt;uname -i&lt;/code&gt; and if you see &lt;code&gt;x86-64&lt;/code&gt; you&amp;nbsp;are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let&amp;#8217;s fire it up! Within &lt;code&gt;/usr/local/andoroid-studio/bin&lt;/code&gt; type &lt;code&gt;./studio.sh&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="/images/2021/DRM_05.png"&gt;&lt;/p&gt;
&lt;h3&gt;Step 2. Spin up a virtual android&amp;nbsp;device&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Start &lt;span class="caps"&gt;AVD&lt;/span&gt; Manager by clicking on the little phone icon in the far&amp;nbsp;upper-right.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Starting AVD Manager from Within Android Studio" src="/images/2021/DRM_06.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Next you need a virtual device. I am a total idiot in this area. I have no experience with Android development. But I can tell you that you must have root-access on the device you create, and in order to allow root access you must not use a Google Play image. So what does that mean? That means do not use an image that has the Google Play icon, like this &lt;strong&gt;(A)&lt;/strong&gt;.
&lt;img alt="Selecting an Image Withing AVD Manager" src="/images/2021/DRM_07.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can create your own image as others have done, but I just used the &lt;code&gt;Pixel_3a_API_30_x86&lt;/code&gt; that was present when I started &lt;span class="caps"&gt;AVD&lt;/span&gt;&amp;nbsp;Manager. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;To start the image click the green &amp;#8220;play&amp;#8221; triangle &lt;strong&gt;(B)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Warning
 ~ You a need a virtual device that is &lt;u&gt;not&lt;/u&gt; a Google Play image so that you can access root. This is&amp;nbsp;critical.&lt;/p&gt;
&lt;p&gt;A phone will appear and after a couple seconds it will &amp;#8220;boot up&amp;#8221;. Here&amp;#8217;s&amp;nbsp;mine:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example of Virtual Device" src="/images/2021/DRM_08.png"&gt;&lt;/p&gt;
&lt;h3&gt;Step 3. Check if you have root&amp;nbsp;access&lt;/h3&gt;
&lt;p&gt;If you don&amp;#8217;t have root access you did something wrong and there is no point in continuing, so let&amp;#8217;s check&amp;nbsp;now.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open a terminal screen. When you install Android Studio it created an &amp;#8220;Android&amp;#8221; directory in your home folder. Go there and browser in &lt;code&gt;~/Android/Sdk/platform-tools&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You should see a command named &lt;code&gt;adb&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type &lt;code&gt;./adb root&lt;/code&gt; and you should see something like &lt;code&gt;restarting adbd as root&lt;/code&gt;. If you do not, you are screwed. Go back and figure out what you did wrong. The primary source is that whole “Not a Google Play image&amp;nbsp;thing”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we can get inside the virtual device, &lt;code&gt;./adb shell&lt;/code&gt;. Your cursor should be a pound &amp;#8220;#&amp;#8221; indicating you are&amp;nbsp;root. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are not root, you can&amp;#8217;t go into all the necessary directory folders.
&lt;img alt="" src="/images/2021/DRM_15.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep this terminal around, we’ll need it&amp;nbsp;later. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 4. Install B&amp;amp;N eReader app on the virtual&amp;nbsp;device&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In your virtual device, open the Chrome browser. Just navigate with your&amp;nbsp;mouse.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy this url &lt;code&gt;https://apkpure.com/nook-read-ebooks-magazines/bn.ereader/versions&lt;/code&gt; and paste into the Chrome&amp;nbsp;browser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Left-click in the web address&amp;nbsp;box&lt;/li&gt;
&lt;li&gt;Press and hold left mouse for a second, just like you would do on your mobile&amp;nbsp;phone&lt;/li&gt;
&lt;li&gt;Select the &amp;#8220;paste&amp;#8221;&amp;nbsp;option&lt;/li&gt;
&lt;li&gt;Press enter on your desktop&amp;nbsp;keyboard&lt;/li&gt;
&lt;li&gt;Download an .apk of the B&amp;amp;N Reader&amp;nbsp;app &lt;/li&gt;
&lt;li&gt;Again honesty&amp;#8230; I don&amp;#8217;t know the difference of capabilities or restrictions between all the different versions. I can say that I used &lt;code&gt;V5.2.0.18&lt;/code&gt; so you might as well do the&amp;nbsp;same.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Example Showing Downloading B&amp;amp;N Reader App .apk" src="/images/2021/DRM_09.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I got an ad, so close the ad by pressing the &amp;#8220;X&amp;#8221;. You typically get warnings when installing apps outside of the Google Store, so you will probably get a warning like&amp;nbsp;this:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Warning" src="/images/2021/DRM_10.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the&amp;nbsp;app&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Install Confirmation" src="/images/2021/DRM_11.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the&amp;nbsp;app&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 5. Log-in to the eReader and download your desired&amp;nbsp;book&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It will ask you to log-in with your username/password. I didn&amp;#8217;t take any screenshots of these steps, but it is typical app setup&amp;nbsp;junk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then it may ask for credit card information if you don&amp;#8217;t already have it setup in your B&amp;amp;N account &amp;#8212;like I did not. you can skip this section by scrolling to the bottom of the screen and hitting&amp;nbsp;&amp;#8220;Skip&amp;#8221;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give it a minute and it will download your library. Somewhere it said you can also pull-up on the screen to make it refresh. Here&amp;#8217;s what mine looked like. It included the purchased book (upper left) and 5 other free books that I didn&amp;#8217;t ask&amp;nbsp;for.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="B&amp;amp;N Reader Library" src="/images/2021/DRM_12.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Now you have to download your book onto your virtual device. I used this method on two different books, and for both all I did was open the book inside the device and the app downloaded the entire &lt;code&gt;.epub&lt;/code&gt;. I instructions on the web about selecting &lt;code&gt;Download to SD Card&lt;/code&gt; in the settings and such, but I didn&amp;#8217;t have to do&amp;nbsp;that. &lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, we should be done with the virtual device now. But don&amp;#8217;t shut it down because we need to go inside the shell and pull out the book you just&amp;nbsp;downloaded.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 6. Go into root shell and pull out the book and encryption&amp;nbsp;hash&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go back to the terminal screen where you opened the&amp;nbsp;shell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we need to find that book file we just downloaded. I noticed that the B&amp;amp;N books appear to be in the format &lt;code&gt;123456789_epub.Vx.epub&lt;/code&gt;. That is, a bunch of numbers +\ _epub+a version number+.epub&amp;nbsp;extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I found the downloaded book at `/data/data/bn.ereader/files/B&amp;amp;N Downloads/Books/
&lt;img alt="" src="/images/2021/DRM_17.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;To copy a file from the virtual device to desktop you have to &amp;#8220;pull&amp;#8221; it from &lt;strong&gt;back in the terminal&lt;/strong&gt; - not the &lt;span class="caps"&gt;ADB&lt;/span&gt;&amp;nbsp;shell.&lt;/li&gt;
&lt;li&gt;Since you are not in the shell you cannot tab-complete the file dirs/filename so I suggest copy/pasting the directory path and then copy/pasting the file&amp;nbsp;name.&lt;/li&gt;
&lt;li&gt;Also, don&amp;#8217;t forget to escape the &amp;#8220;&amp;amp;&amp;#8221; and space&amp;nbsp;characters.&lt;/li&gt;
&lt;li&gt;See the example below.
&lt;img alt="" src="/images/2021/DRM_18.png"&gt;&lt;/li&gt;
&lt;li&gt;Now let&amp;#8217;s go get the encryption hash. It&amp;#8217;s stored in a database named &lt;code&gt;cchashdata.db&lt;/code&gt;. Search for it inside the &lt;span class="caps"&gt;ADB&lt;/span&gt; shell but I would bet it&amp;#8217;s in the same directory as where you found the file = &lt;code&gt;./adb pull /data/data/bn.ereader/databases/cchashdata.db&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Files will be in the current directory
&lt;img alt="" src="/images/2021/DRM_19.png"&gt;&lt;/li&gt;
&lt;li&gt;Find the hash and save it as a&amp;nbsp;keyfile. &lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;sqlite3 cchashdata.db&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This opens a SQLite shell. Look inside a specific table, type &lt;code&gt;select hash from cc_hash_data;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You&amp;#8217;ll get a HashKey, copy that &lt;span class="caps"&gt;INCLUDING&lt;/span&gt; &lt;span class="caps"&gt;THE&lt;/span&gt; &lt;span class="caps"&gt;TRAILING&lt;/span&gt; &lt;span class="caps"&gt;EQUAL&lt;/span&gt; &lt;span class="caps"&gt;SIGN&lt;/span&gt;. Here&amp;#8217;s mine, don&amp;#8217;t worry, I obfuscated a bunch of the&amp;nbsp;letters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="/images/2021/DRM_20.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open a new file and save it somewhere with a .b64 extension, like&amp;nbsp;&amp;#8220;MyHash.b64&amp;#8221;.&lt;/li&gt;
&lt;li&gt;To exit the SQLite shell press&amp;nbsp;Ctrl-Z&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To exit the &lt;span class="caps"&gt;ADB&lt;/span&gt; shell press&amp;nbsp;Crtl-D&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that this hashkey is good for all books purchased at B&amp;amp;N by that&amp;nbsp;account. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 7. Install&amp;nbsp;Calibre&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;This is pretty straight forward so I&amp;#8217;ll breeze through this part. I installed version 4.99.4 as that what was in the repository. At the time of writing version 5.10.1 was &lt;a href="https://calibre-ebook.com/download_linux"&gt;available as binary install&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Note that the plugin DeDRM version must be applicable for the correct Calibre version. DeDRM v6.x = Calibre 4.x and DeDRM v7.x = Calibre 5.x so keep that in mind and look at the release&amp;nbsp;notes. &lt;/li&gt;
&lt;li&gt;Install the latest directly from&amp;nbsp;Calibre&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt install -y libfontconfig libgl1-mesa-glx
bash sudo -v &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh &lt;span class="p"&gt;|&lt;/span&gt; sudo sh /dev/stdin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install via Software&amp;nbsp;Center&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install via&amp;nbsp;apt-get&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install calibre
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;I chose the first option and installed directly from Calibre. So if you do something other than that &amp;#8220;buyer&amp;nbsp;beware&amp;#8221;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 8. Install DeDRM plug-in for&amp;nbsp;Calibre&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open browser and go to DeDRM github page at &lt;a href="https://github.com/apprenticeharper/DeDRM_tools/releases"&gt;https://github.com/apprenticeharper/DeDRM_tools/releases&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the plugin .zip package. I chose to download the latest pre-release at the time (v7.0.3).  Just click the zip link in the &amp;#8220;Assets&amp;#8221; subsection and&amp;nbsp;save. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;You need the zip package named&amp;nbsp;&amp;#8220;DeDRM_plugin_x.x.x.zip&amp;#8221;&lt;/li&gt;
&lt;li&gt;It appears that if you download a pre-release it is just that plugin folder, so don&amp;#8217;t unzip&amp;nbsp;it.&lt;/li&gt;
&lt;li&gt;If you download a normal release it will say something like &amp;#8220;DeDRM_tools_x.x.x.zip&amp;#8221;. In which case unzip it and you will find the &amp;#8220;DeDRM_plugin.zip&amp;#8221;&amp;nbsp;inside&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open&amp;nbsp;Calibre&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the Preference icon in the tool&amp;nbsp;bar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scroll down to Advanced and click&amp;nbsp;Plugins&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Plugin Location Within Calibre" src="/images/2021/DRM_21.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;#8220;Load plugin from&amp;nbsp;file&amp;#8221;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the &lt;code&gt;DeDRM_plugin.zip&lt;/code&gt; zip package you saved. Click yes and ok to&amp;nbsp;everything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Back in the Plugins dialog, select &amp;#8220;File type&amp;#8221; and select &amp;#8220;DeDRM&amp;#8221;, click the button &amp;#8220;Customize&amp;nbsp;plugin&amp;#8221;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="DeDREM Plugin Customization Location" src="/images/2021/DRM_23.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Select &amp;#8220;Barnes and Noble&amp;nbsp;ebooks&amp;#8221;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &amp;#8220;Import Existing&amp;nbsp;Keyfiles&amp;#8221;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Browse and select the keyfile you saved, something like &lt;code&gt;MyHash.b64&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Importing KeyFile" src="/images/2021/DRM_24.png"&gt;&lt;/p&gt;
&lt;h3&gt;Step 9. Remove &lt;span class="caps"&gt;DRM&lt;/span&gt; from&amp;nbsp;book&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;At this point, you can add your book that you downloaded from the virtual device. Remember in my example it was &lt;code&gt;9780133489293_epub.v2.epub&lt;/code&gt;. WIihin Calibre select &amp;#8220;Add&amp;nbsp;books&amp;#8221;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Browse to and select the epub. Select &lt;span class="caps"&gt;OK&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you double-click the book to open it and get an error message stating you have &lt;span class="caps"&gt;DRM&lt;/span&gt; then something went&amp;nbsp;wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can go post a message to the &lt;a href="https://github.com/apprenticeharper/DeDRM_tools/issues/814"&gt;DeDRM forum&lt;/a&gt; along with a log file. They are very helpful. &lt;a href="https://github.com/apprenticeharper/DeDRM_tools/blob/master/FAQs.md#i-cannot-solve-my-problem-with-the-dedrm-plugin-and-now-i-need-to-post-a-log-how-do-i-do-that"&gt;Here are instructions&lt;/a&gt; on creating a debug&amp;nbsp;log. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The goal of this post was to add clarifications to &lt;a href="https://www.aricrenzo.com/2019-12-13-Liberate-Your-Nook-Ebooks/"&gt;Aric Renzo&amp;#8217;s excellent instructions&lt;/a&gt; based on what worked for me. These instructions are not for Windows but could probably be adjusted to make work. I&amp;#8217;m positive there are other methods of making this work. If there are any mistakes to these instructions feel free to hit me up on&amp;nbsp;twitter.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Splitting Audio Files into Tracks Based on .cue File</title><link href="http://www.joelotz.com/blog/2021/splitting-audio-files-into-tracks-based-on-cue-file.html" rel="alternate"></link><published>2021-01-26T00:00:00+05:30</published><updated>2021-01-26T00:00:00+05:30</updated><author><name>Joe Lotz</name></author><id>tag:www.joelotz.com,2021-01-26:/blog/2021/splitting-audio-files-into-tracks-based-on-cue-file.html</id><summary type="html">&lt;p&gt;Here&amp;#8217;s a problem that I come across once in a while. Let’s say you’ve downloaded an album from torrent and the entire album is in a single file. Sure, you can load the .cue file into your favorite music player and play the different tracks but you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here&amp;#8217;s a problem that I come across once in a while. Let’s say you’ve downloaded an album from torrent and the entire album is in a single file. Sure, you can load the .cue file into your favorite music player and play the different tracks but you really would like this album split into individual files for each&amp;nbsp;track. &lt;/p&gt;
&lt;p&gt;Warning
 ~ It&amp;#8217;s assumed that you are downloading &lt;strong&gt;&lt;em&gt;legally&lt;/em&gt;&lt;/strong&gt; obtained torrents. Don&amp;#8217;t sue me &lt;span class="caps"&gt;RIAA&lt;/span&gt;!!&lt;/p&gt;
&lt;p&gt;You can, of course, load the flac/mp3 into &lt;a href="https://www.audacityteam.org/"&gt;Audacity&lt;/a&gt;, manually insert labels (for example at the arrow locations), and export tracks. But I&amp;#8217;m going to show you a semi-automated&amp;nbsp;method. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Audacity Showing Track Breaks in the Audio File" src="/images/2021/audacity_05.png"&gt;&lt;/p&gt;
&lt;p&gt;Audacity has the ability to import label files. These are basically text files that tells the program at what starting/ending point to add the label and what the label’s… um… label should be. That’s great, but I don’t know where you get this label file from. This is not included with your (legally obtained!) torrent. But you do typically get a .cue file. If you got this file we are in the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/2021/audacity_01.png"&gt;&lt;/p&gt;
&lt;p&gt;There is a site online that someone wrote that will convert for you here &lt;a href="http://grimblefritz.com/audacity/cue2lbl.php"&gt;http://grimblefritz.com/audacity/cue2lbl.php&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Of course, being a geek I wrote my own Python script to do it for me!  Download the github gist &lt;a href="https://gist.github.com/joelotz/49d99e6c464825a0e551146bd92369a3"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="numberLines highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Convert a music .cue file into a label file.&lt;/span&gt;

&lt;span class="sd"&gt;This module will accept an optional string attribute that specifies the input&lt;/span&gt;
&lt;span class="sd"&gt;.cue file. If this file is not provided in the call then file-select box will&lt;/span&gt;
&lt;span class="sd"&gt;be presented to the user. Output is a .txt file of labels that can be input&lt;/span&gt;
&lt;span class="sd"&gt;into Audacity.&lt;/span&gt;

&lt;span class="sd"&gt;Examples:&lt;/span&gt;
&lt;span class="sd"&gt;        $ python cue2labels.py&lt;/span&gt;
&lt;span class="sd"&gt;        $ python cue2labels.py &amp;quot;InputFile.cue&amp;quot;&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stringtime_to_millisec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stringtime&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    stringtime : STRING&lt;/span&gt;
&lt;span class="sd"&gt;        A string in the form of &amp;quot;HH:MM:SS:MS&amp;quot;, where MS are millisecs.&lt;/span&gt;
&lt;span class="sd"&gt;        Hours(HH) and Minutes(MM) are optional.&lt;/span&gt;
&lt;span class="sd"&gt;        Seconds(SS) and Millisecs(MS) are mandatory.&lt;/span&gt;
&lt;span class="sd"&gt;        Example: 10:05:12 = 10hrs, 5mins, 12ms&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    FLOAT&lt;/span&gt;
&lt;span class="sd"&gt;        Returns a the input stringtime as decimal seconds&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;stringtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;
    &lt;span class="n"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt; 
    &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="n"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_cue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cue_filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    cue_filename : STRING&lt;/span&gt;
&lt;span class="sd"&gt;        The name of the .cue file to be read and parsed.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    track_times : LIST&lt;/span&gt;
&lt;span class="sd"&gt;        The time that the audio track starts, as given in the .cue file, &lt;/span&gt;
&lt;span class="sd"&gt;        in decimal seconds&lt;/span&gt;
&lt;span class="sd"&gt;    titles : LIST&lt;/span&gt;
&lt;span class="sd"&gt;        The title of the track, as given in the .cue file.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;

    &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cue_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;track_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;titles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="c1"&gt;# Get next line from file &lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

        &lt;span class="c1"&gt;# if line is empty end of file is reached &lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;INDEX 01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;stringtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stringtime_to_millisec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;stringtime&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;track_times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stringtime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TITLE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;([^&amp;quot;]*)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                

    &lt;span class="c1"&gt;# I&amp;#39;ve had trouble in the past         &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;track_times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;warning_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;There is someting wrong with the .cue file, it&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;s not formatted properly.&lt;/span&gt;
&lt;span class="s1"&gt;         Unable to continue processing!&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
         &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;warning_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;track_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_labels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    label_filename : STRING&lt;/span&gt;
&lt;span class="sd"&gt;        The desired path/name of the output label file.&lt;/span&gt;
&lt;span class="sd"&gt;    track_times : LIST        &lt;/span&gt;
&lt;span class="sd"&gt;        The time that the audio track starts, as given in the .cue file, &lt;/span&gt;
&lt;span class="sd"&gt;        in decimal seconds&lt;/span&gt;
&lt;span class="sd"&gt;    titles : LIST&lt;/span&gt;
&lt;span class="sd"&gt;        The title of the track, as given in the .cue file.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    bool&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Due to the format of the .cue file, the first track title may be the album title&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;track_times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Write out in tab delimited format&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;track_times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.5f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;track_times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.5f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

    &lt;span class="c1"&gt;# Check if .cue file was given in the python call&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cue_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="c1"&gt;# If not, ask user to select        &lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkinter.filedialog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;askopenfilename&lt;/span&gt;
        &lt;span class="n"&gt;cue_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;askopenfilename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Select a cue file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filetypes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cue files&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.cue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),))&lt;/span&gt;
        &lt;span class="c1"&gt;## EXIT if user selects cancel&lt;/span&gt;

    &lt;span class="c1"&gt;# Read cue file and parse out the times and titles&lt;/span&gt;
    &lt;span class="n"&gt;track_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_cue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cue_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Make a label file name&lt;/span&gt;
    &lt;span class="n"&gt;label_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cue_filename&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_labels.txt&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# Write times and tracks to label file in proper format&lt;/span&gt;
    &lt;span class="n"&gt;write_labels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can run this script with or without specifying the optional cue file string attribute. If you don’t specify it the script will present a popup for you to select&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python cue2labels.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python cue2labels.py &lt;span class="s2"&gt;&amp;quot;inputfile.cue&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Your cue file contains the albums information, like album title, metadata, track titles, starting position, etc. It will look something like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example .cue File" src="/images/2021/audacity_03.png"&gt;&lt;/p&gt;
&lt;p&gt;At this point you can convert the cue to a label file, either online or with the Python script. If you ran the Python script you will have a new file in the same directory as the cue file. Like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example of Label File Created in Directory" src="/images/2021/audacity_02.png"&gt;&lt;/p&gt;
&lt;p&gt;The label file will be pretty simple with the track starting times and title names and will look like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example Lable File" src="/images/2021/audacity_04.png"&gt;&lt;/p&gt;
&lt;p&gt;Now we are on the home stretch! Open Audacity and import your music flac/mp3 file. Now go to &lt;code&gt;File &amp;gt; Import &amp;gt; Labels...&lt;/code&gt;, select the label&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;The labels are now magically inserted at the track start times with the title filled&amp;nbsp;in!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example Showing Labels Imported from File Within Audacity" src="/images/2021/audacity_06.png"&gt;&lt;/p&gt;
&lt;p&gt;From here go to &lt;code&gt;File &amp;gt; Export &amp;gt; Export Multiple...&lt;/code&gt; yadda, yadda. The result are individual files for each track as shown&amp;nbsp;here:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example Output Showing Individual Track Files Were Created" src="/images/2021/audacity_07.png"&gt;&lt;/p&gt;
&lt;p&gt;On a final and unrelated note, if you&amp;#8217;ve never heard of &lt;a href="https://en.wikipedia.org/wiki/Tower_of_Power"&gt;Tower of Power&lt;/a&gt; you are missing out. It&amp;#8217;s an R&amp;amp;B band started in the 70&amp;#8217;s that has a &lt;em&gt;killer&lt;/em&gt; horn&amp;nbsp;section.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/oAatPPEaZDA" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="misc"></category><category term="Audacity"></category><category term="Python"></category></entry><entry><title>Python One-Liners</title><link href="http://www.joelotz.com/blog/2021/python-one-liners.html" rel="alternate"></link><published>2021-01-20T00:00:00+05:30</published><updated>2021-01-20T00:00:00+05:30</updated><author><name>Joe Lotz</name></author><id>tag:www.joelotz.com,2021-01-20:/blog/2021/python-one-liners.html</id><summary type="html">&lt;p&gt;As a bonus, here are two of my favorite python&amp;nbsp;one-liners:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Swapping Variables&lt;/u&gt;&lt;/strong&gt; - no need to use temp variables. In some other languages, like C, you would need a temporary variable to hold a value while you swap them around. Something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Assign values to …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;As a bonus, here are two of my favorite python&amp;nbsp;one-liners:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Swapping Variables&lt;/u&gt;&lt;/strong&gt; - no need to use temp variables. In some other languages, like C, you would need a temporary variable to hold a value while you swap them around. Something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Assign values to variables&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Value of first variable is assigned to temp&lt;/span&gt;
&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Value of second variable is assigned to the first&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Value of temp (initial first) is assigned back to the second variable&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But in Python it’s a lot more…&amp;nbsp;elegant. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Assign values to variables&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;

&lt;span class="c1"&gt;# Swap values&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Multiple Variable Assignment&lt;/u&gt;&lt;/strong&gt; - the above example shows another of my favorites. We can assign values to multiple variables with a single line. Even cooler is we can use an asterix and assign multiple values to a&amp;nbsp;variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; 1 [2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code, &lt;code&gt;a&lt;/code&gt; is assigned the first element in the list while &lt;code&gt;b&lt;/code&gt; is assigned all the&amp;nbsp;remaining.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; [1, 2, 3, 4] 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code, &lt;code&gt;a&lt;/code&gt; is assigned all the elements except the last, and &lt;code&gt;b&lt;/code&gt; is assigned the last element in the&amp;nbsp;list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; 1 [2, 3, 4] 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, in the above code, &lt;code&gt;a&lt;/code&gt; is assigned the first element, &lt;code&gt;c&lt;/code&gt; is assigned the last element, and &lt;code&gt;b&lt;/code&gt; is assigned all the elements in&amp;nbsp;between.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;List Comprehension&lt;/u&gt;&lt;/strong&gt; - this is a really cool way to build a list without using loops. I’ve seen people go overboard on it where I couldn’t even understand what was going on. Here is the basic&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Silly loop example&lt;/span&gt;
&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# List comprehension&lt;/span&gt;
&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is the&amp;nbsp;syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so in the previous&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also get complex with the&amp;nbsp;expression, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;some_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;some_array&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; [&amp;#39;Hello&amp;#39;, &amp;#39;Goodbye&amp;#39;, &amp;#39;Hello&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In a &lt;a href="playing-around-with-fizzbuzz.html"&gt;previous post&lt;/a&gt; I did a multi-line if/elif/else&amp;nbsp;replacement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# List Comprehension&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FizzBuzz&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fizz&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Buzz&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cool,&amp;nbsp;huh?&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category></entry><entry><title>Playing around with FizzBuzz</title><link href="http://www.joelotz.com/blog/2021/playing-around-with-fizzbuzz.html" rel="alternate"></link><published>2021-01-18T00:00:00+05:30</published><updated>2021-01-18T00:00:00+05:30</updated><author><name>Joe Lotz</name></author><id>tag:www.joelotz.com,2021-01-18:/blog/2021/playing-around-with-fizzbuzz.html</id><summary type="html">&lt;p&gt;I was bored and reading a Python article on Medium where it challenged the reader to write a python one-liner to solve the &lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz"&gt;FizzBuzz&lt;/a&gt; question. This is a long-time famous programming interview question that everyone most likely knows, so I won’t explain it. Like I said, I was bored …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was bored and reading a Python article on Medium where it challenged the reader to write a python one-liner to solve the &lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz"&gt;FizzBuzz&lt;/a&gt; question. This is a long-time famous programming interview question that everyone most likely knows, so I won’t explain it. Like I said, I was bored so I wrote it&amp;nbsp;out. &lt;/p&gt;
&lt;p&gt;Here is my long-form solution using&amp;nbsp;loops:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;loop_fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;loop_fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I did the one-liner using list comprehension, but then thought it would be interesting to create a generator and spit it out in a list comprehension. Since this is such a trivial example, I don&amp;#8217;t see any memory benefit, or any benefit it all except being&amp;nbsp;silly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;listcomp_fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# create a generator&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FizzBuzz&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fizz&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Buzz&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;listcomp_fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Completely by coincidence - honestly - I just saw on Twitter that &lt;a href="https://joelgrus.com/"&gt;Joel Grus&lt;/a&gt; &lt;a href="https://twitter.com/joelgrus"&gt;@joelgrus&lt;/a&gt; (a data science nerd that I &lt;s&gt;stalk&lt;/s&gt; follow) just published a humorous and interesting book titled “&lt;a href="https://leanpub.com/fizzbuzz/"&gt;Ten Essays on Fizz Buzz&lt;/a&gt;”. It’s a collection of stories with unusual Fizz Buzz solutions, for example, he imagines creating and training a neural network to predict the first 100 answers. Totally outrageous, but the interview story he imagines along with the solution is pretty funny! Anyways - support your fellow&amp;nbsp;nerds!&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category></entry><entry><title>Creating a Launch Shortcut for Anaconda on Ubuntu</title><link href="http://www.joelotz.com/blog/2021/creating-a-launch-shortcut-for-anaconda-on-ubuntu.html" rel="alternate"></link><published>2021-01-16T00:00:00+05:30</published><updated>2021-01-16T00:00:00+05:30</updated><author><name>Joe Lotz</name></author><id>tag:www.joelotz.com,2021-01-16:/blog/2021/creating-a-launch-shortcut-for-anaconda-on-ubuntu.html</id><summary type="html">&lt;p&gt;When you install Anaconda on Ubuntu, for some reason, it doesn’t create a launching shortcut. First, install per instructions: &lt;a href="https://linuxize.com/post/how-to-install-anaconda-on-ubuntu-20-04/"&gt;https://linuxize.com/post/how-to-install-anaconda-on-ubuntu-20-04/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next, create a desktop file in your applications&amp;nbsp;directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gedit ~/.local/share/applications/anaconda.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enter this data, it&amp;#8217;s pretty straight&amp;nbsp;forward.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Desktop Entry …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;When you install Anaconda on Ubuntu, for some reason, it doesn’t create a launching shortcut. First, install per instructions: &lt;a href="https://linuxize.com/post/how-to-install-anaconda-on-ubuntu-20-04/"&gt;https://linuxize.com/post/how-to-install-anaconda-on-ubuntu-20-04/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next, create a desktop file in your applications&amp;nbsp;directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gedit ~/.local/share/applications/anaconda.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enter this data, it&amp;#8217;s pretty straight&amp;nbsp;forward.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Desktop Entry]&lt;/span&gt;
&lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1.0&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Application&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Anaconda&lt;/span&gt;
&lt;span class="na"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/joe/anaconda3/bin/anaconda-navigator&lt;/span&gt;
&lt;span class="na"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/joe/anaconda3/lib/python3.7/site-packages/anaconda_navigator/app/icons/Icon1024.png&lt;/span&gt;
&lt;span class="na"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The two important items are &lt;code&gt;Exec&lt;/code&gt; and &lt;code&gt;Icon&lt;/code&gt; paths. &lt;code&gt;Exec&lt;/code&gt; is where anaconda was installed. More than likely you will only need to replace &amp;#8220;joe&amp;#8221; with your userpath. I recommend verifying the &lt;code&gt;Icons&lt;/code&gt; path, for example you may be more up to date and are using python3.8. In which case your path would be slightly&amp;nbsp;different. &lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it! Now you can press Windows Key and activate the Application Launcher and start typing anaconda. You should see your shortcut&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Anaconda Launcher" src="/images/2021/anaconda-launcher.png"&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="Anaconda"></category></entry><entry><title>Installing FreeFileSync in Ubuntu</title><link href="http://www.joelotz.com/blog/2021/installing-freefilesync-in-ubuntu.html" rel="alternate"></link><published>2021-01-13T00:00:00+05:30</published><updated>2021-01-13T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2021-01-13:/blog/2021/installing-freefilesync-in-ubuntu.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;(2021-02-09)&lt;/strong&gt;: As of v11.6 FreeFileSync uses an installer. I don&amp;#8217;t believer these instructions are valid anymore. The package you download is now a &lt;code&gt;.zip&lt;/code&gt; containing a &lt;code&gt;.run&lt;/code&gt; and a &lt;code&gt;.key&lt;/code&gt; file. From terminal you execure the &lt;code&gt;.run&lt;/code&gt; file, or you could probably double-click it. It asked to accept …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;(2021-02-09)&lt;/strong&gt;: As of v11.6 FreeFileSync uses an installer. I don&amp;#8217;t believer these instructions are valid anymore. The package you download is now a &lt;code&gt;.zip&lt;/code&gt; containing a &lt;code&gt;.run&lt;/code&gt; and a &lt;code&gt;.key&lt;/code&gt; file. From terminal you execure the &lt;code&gt;.run&lt;/code&gt; file, or you could probably double-click it. It asked to accept the license terms and then asked to accept the installation location. It was pretty&amp;nbsp;slick!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Go to &lt;a href="https://freefilesync.org/download.php"&gt;https://freefilesync.org/download.php&lt;/a&gt; and download the latest version for Ubuntu. For most browsers, the default download location is the directory &lt;code&gt;~/Downloads&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Where do you install your personal software? This is something you may or may not have an opinion about, either way you need to make a decision. When you install software through Software Updater or &lt;code&gt;apt-get&lt;/code&gt; the location is &lt;code&gt;/bin/&amp;lt;package&amp;gt;&lt;/code&gt; but it’s generally accepted that you don’t put manually-installed packages&amp;nbsp;there. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="http://en.wikipedia.org/wiki/Linux_Standard_Base"&gt;Linux Standard Base&lt;/a&gt; and the &lt;a href="http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard"&gt;Filesystem Hierarchy Standard&lt;/a&gt; are arguably the standards of where and how you should install software on a Linux system and would suggest placing software that isn&amp;#8217;t included in your distribution either in /opt or /usr/local/ or rather subdirectories therein (/opt/&lt;package&gt;  /opt/&lt;provider&gt;  /usr/local/bin).  &lt;br&gt;&lt;br&gt;
— from &lt;a href="https://unix.stackexchange.com/questions/127076/into-which-directory-should-i-install-programs-in-linux"&gt;https://unix.stackexchange.com/questions/127076/into-which-directory-should-i-install-programs-in-linux&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For me, I “install” in &lt;code&gt;/opt/&lt;/code&gt; so these instructions assume that&amp;nbsp;location. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo tar -zxvf ~/Downloads/FreeFileSync_*_Linux.tar.gz -C /opt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command extracts the compressed tar and puts the contents in the &lt;code&gt;/opt/&lt;/code&gt; directory. The contents are already contained within a directory named &lt;code&gt;FreeFileSync&lt;/code&gt;, so need to create&amp;nbsp;one. &lt;/p&gt;
&lt;p&gt;Next we need to create a shortcut. There is an example shortcut file provided as &lt;code&gt;/opt/FreeFileSync/FreeFileSync.Example.desktop&lt;/code&gt; that you can copy and then edit, but I find it easier just to create a blank file and copy/paste text. Type this command to create a file and open it in an&amp;nbsp;editor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gedit ~/.local/share/applications/FreeFileSync.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Copy the text below into the empty file, save, and&amp;nbsp;close.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Desktop Entry]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Application&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;FreeFileSync&lt;/span&gt;
&lt;span class="na"&gt;Comment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Keep files and folders synchronized&lt;/span&gt;
&lt;span class="na"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/opt/FreeFileSync/Resources/FreeFileSync.png&lt;/span&gt;
&lt;span class="na"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/opt/FreeFileSync/FreeFileSync %F &lt;/span&gt;
&lt;span class="na"&gt;NoDisplay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;Categories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Utility;FileTools;&lt;/span&gt;
&lt;span class="na"&gt;StartupNotify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can do the same for RealTimeSync if you&amp;nbsp;want.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gedit ~/.local/share/applications/RealTimeSync.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Copy the text below, save, and&amp;nbsp;close.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Desktop Entry]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Application&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;RealTimeSync&lt;/span&gt;
&lt;span class="na"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/opt/FreeFileSync/RealTimeSync %f&lt;/span&gt;
&lt;span class="na"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/opt/FreeFileSync/Resources/RealTimeSync.png&lt;/span&gt;
&lt;span class="na"&gt;NoDisplay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;Categories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Utility;FileTools;&lt;/span&gt;
&lt;span class="na"&gt;StartupNotify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Updating&amp;nbsp;FreeFileSync&lt;/h3&gt;
&lt;p&gt;When you want to update versions, simply “install” the latest version into your installation directory per the instructions above. For example, let’s say you have version 11.1 and want to update to the latest version which happens to be 11.5. In this example, I assume you have previously put the package in &lt;code&gt;\opt\FreeFileSync\&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Download the tar.gz file, uncompress it into the existing &lt;code&gt;\opt\FreeFileSync\&lt;/code&gt; directory.&amp;nbsp;Done. &lt;/p&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="FreeFileSync"></category></entry><entry><title>Changing mp4 CreationDates with Exiftool</title><link href="http://www.joelotz.com/blog/2020/changing-mp4-creationdates-with-exiftool.html" rel="alternate"></link><published>2020-11-14T00:00:00+05:30</published><updated>2020-11-14T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-11-14:/blog/2020/changing-mp4-creationdates-with-exiftool.html</id><summary type="html">&lt;p&gt;I assume there is a tiny cell battery inside my GoPro that keeps the settings and such for a short period while the main battery is removed or charging. I had removed the battery and let the GoPro set for a while and the date setting reset. I hadn’t …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I assume there is a tiny cell battery inside my GoPro that keeps the settings and such for a short period while the main battery is removed or charging. I had removed the battery and let the GoPro set for a while and the date setting reset. I hadn’t noticed when I inserted a battery and started filming all the videos had a creation date of 2016-04-23 which was exactly 1600 days before the real date. I don’t know why… I’m sure there is a &lt;a href="https://en.wikipedia.org/wiki/Real-time_clock"&gt;real-time clock&lt;/a&gt; inside and the reset date has to do with some default&amp;nbsp;value. &lt;/p&gt;
&lt;p&gt;So the problem is - how do I change a bunch of exif date data-fields in my mp4s? I want to change the date but also I want to keep the&amp;nbsp;time. &lt;/p&gt;
&lt;h3&gt;Enter&amp;nbsp;Exiftool!&lt;/h3&gt;
&lt;p&gt;I &lt;a href="/tag/exiftool.html"&gt;really like&lt;/a&gt; &lt;a href="https://exiftool.org/"&gt;exiftool&lt;/a&gt;, it is an amazing utility. Let’s start by looking at all the data fields that contain&amp;nbsp;dates. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;exiftool -time:all -a -G0:1 -s filename.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you would expect there are multiple date fields set by GoPro in the mp4&amp;nbsp;container.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image1" src="/images/2020/ChangingMp4Date_01.png"&gt;&lt;/p&gt;
&lt;p&gt;There are multiple solutions… we could set each field individually and&amp;nbsp;explicitly. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;exiftool -CreateDate&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2020:08:20 00:46:59&amp;quot;&lt;/span&gt; -ModifyDate&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2020:08:20 00:46:59&amp;quot;&lt;/span&gt; -Track*Date&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2020:08:20 00:46:59&amp;quot;&lt;/span&gt; -Media*Date&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2020:08:20 00:46:59&amp;quot;&lt;/span&gt; test.MP4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not surprisingly, Phil Harvey (the awesome author of exiftool) has created a magic tag names “time:all”. This makes our command a bit&amp;nbsp;easier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;exiftool -time:all&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2020:08:20 00:46:59&amp;quot;&lt;/span&gt; test.MP4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Image2" src="/images/2020/ChangingMp4Date_03.png"&gt;&lt;/p&gt;
&lt;p&gt;This would work for a file or two, but I want to change a couple dozen files and the above solution would require me to enter the date and time for each file. The solution is time-shifting. As stated earlier in this post, the files are 1600 days behind the current date. We can time-shift the dates &lt;em&gt;forward&lt;/em&gt; by 1600&amp;nbsp;days. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;exiftools -time:all+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;00:00:1600 0&amp;quot;&lt;/span&gt; test.MP4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The format for the date/time is &lt;em&gt;&lt;span class="caps"&gt;YY&lt;/span&gt;:&lt;span class="caps"&gt;MM&lt;/span&gt;:&lt;span class="caps"&gt;DD&lt;/span&gt; &lt;span class="caps"&gt;HH&lt;/span&gt;:&lt;span class="caps"&gt;MM&lt;/span&gt;:&lt;span class="caps"&gt;SS&lt;/span&gt;&lt;/em&gt;. Note that “0” in the time field is shorthand for 00:00:00 and if you enter a time value then it won’t&amp;nbsp;work. &lt;/p&gt;
&lt;p&gt;The final command to shift all &lt;span class="caps"&gt;MP4&lt;/span&gt; files in a directory forward by 1600 days&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;exiftools -time:all+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;00:00:1600 0&amp;quot;&lt;/span&gt; *.MP4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Bonus&amp;nbsp;Command&lt;/h3&gt;
&lt;p&gt;My Android camera names pictures as &lt;em&gt;YYYYMMDD_xxxxxx.jpg&lt;/em&gt; and I’ve grown to like this convention. It allows me to sort, filter, find pictures easier by looking at the date in the file name. I’d like my GoPro videos to follow the same convention so that when I combine photos and videos in a directory I have a built-in&amp;nbsp;timeline. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;exiftool -r &lt;span class="s1"&gt;&amp;#39;-FileName&amp;lt;CreateDate&amp;#39;&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;%Y%m%d_%%f.%%e&amp;#39;&lt;/span&gt; *.MP4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was found in the exiftools online forum:&amp;nbsp;https://exiftool.org/forum/index.php?topic=8552.0&lt;/p&gt;</content><category term="misc"></category><category term="Exiftool"></category></entry><entry><title>Searching Files for Keyword in Terminal</title><link href="http://www.joelotz.com/blog/2020/searching-files-for-keyword-in-terminal.html" rel="alternate"></link><published>2020-09-13T00:00:00+05:30</published><updated>2020-09-13T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-09-13:/blog/2020/searching-files-for-keyword-in-terminal.html</id><summary type="html">&lt;p&gt;This is a simple post to document a recent learning. I realized my blog had multiple authors listed due to me being inconsistent with how I wrote it. Sometimes I used &amp;#8220;Joe&amp;#8221; or other times &amp;#8220;Joe Lotz&amp;#8221;. I &lt;em&gt;googled&lt;/em&gt; and found a terminal command to search a directory for&amp;nbsp;keywords …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a simple post to document a recent learning. I realized my blog had multiple authors listed due to me being inconsistent with how I wrote it. Sometimes I used &amp;#8220;Joe&amp;#8221; or other times &amp;#8220;Joe Lotz&amp;#8221;. I &lt;em&gt;googled&lt;/em&gt; and found a terminal command to search a directory for&amp;nbsp;keywords.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;find /DIR_TO_SEARCH/ -type  f -exec grep --color -HIi &lt;span class="s1"&gt;&amp;#39;KEYWORD_OR_PHRASE&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; +
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="Terminal"></category></entry><entry><title>Serving Local Webpages with Python</title><link href="http://www.joelotz.com/blog/2020/serving-local-webpages-with-python.html" rel="alternate"></link><published>2020-07-16T00:00:00+05:30</published><updated>2020-07-16T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-07-16:/blog/2020/serving-local-webpages-with-python.html</id><summary type="html">&lt;p&gt;This article is less of instruction and more documentation for myself since I keep forgetting the Python3 syntax. You can easily serve web pages locally using a bunch of languages and tools, but my preferred method is with Python. It has a simple server that can be quickly launched without …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is less of instruction and more documentation for myself since I keep forgetting the Python3 syntax. You can easily serve web pages locally using a bunch of languages and tools, but my preferred method is with Python. It has a simple server that can be quickly launched without a &lt;span class="caps"&gt;LAMP&lt;/span&gt; stack or anything&amp;nbsp;crazy. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: this is definitely for local usage and not for production or facing the&amp;nbsp;internet!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/http.server.html"&gt;Python3 http.server&lt;/a&gt; help&amp;nbsp;page&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python -m http.server &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run the above syntax in a terminal window in the folder that you want to serve. In my example above, &amp;#8220;python&amp;#8221; is mapped to python3 and 8080 is the port I want to serve at. Typical is 8000 but that is the port I serve my blog at for development and testing.  To view the server, open a web browser and go to the&amp;nbsp;address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or whatever port you&amp;nbsp;defined.&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category></entry><entry><title>Setup Google Domain for Github Pages</title><link href="http://www.joelotz.com/blog/2020/setup-google-domain-for-github-pages.html" rel="alternate"></link><published>2020-07-11T00:00:00+05:30</published><updated>2020-07-11T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-07-11:/blog/2020/setup-google-domain-for-github-pages.html</id><summary type="html">&lt;p&gt;So you are using github pages and want a custom domain name? This article will explain how to configure the &lt;span class="caps"&gt;DNS&lt;/span&gt; records to make that&amp;nbsp;possible. &lt;/p&gt;
&lt;h3&gt;Github&amp;nbsp;Settings&lt;/h3&gt;
&lt;p&gt;First, go into your github pages repository and select the Settings. Note that your github pages is probably something like &lt;code&gt;&amp;lt;yourname&amp;gt;/&amp;lt;yourname …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;So you are using github pages and want a custom domain name? This article will explain how to configure the &lt;span class="caps"&gt;DNS&lt;/span&gt; records to make that&amp;nbsp;possible. &lt;/p&gt;
&lt;h3&gt;Github&amp;nbsp;Settings&lt;/h3&gt;
&lt;p&gt;First, go into your github pages repository and select the Settings. Note that your github pages is probably something like &lt;code&gt;&amp;lt;yourname&amp;gt;/&amp;lt;yourname&amp;gt;.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="customdomain-00" src="/images/2020/customdomain-00.png"&gt;&lt;/p&gt;
&lt;p&gt;Scroll down until you see “custom domain” and then enter the domain you purchased from Google Domain and Save. Be sure to enter “www” before the domain name as shown, I’ll explain why&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;&lt;img alt="customdomain-01" src="/images/2020/customdomain-01.png"&gt;&lt;/p&gt;
&lt;h3&gt;Google Domain &lt;span class="caps"&gt;DNS&lt;/span&gt;&amp;nbsp;Settings&lt;/h3&gt;
&lt;p&gt;Now go to &lt;a href="https://domains.google.com/m/registrar/"&gt;Google Domain&lt;/a&gt; and select “Manage” next to the domain&amp;nbsp;name. &lt;/p&gt;
&lt;p&gt;&lt;img alt="customdomain-08" src="/images/2020/customdomain-08.png"&gt;&lt;/p&gt;
&lt;p&gt;Next click the “&lt;span class="caps"&gt;DNS&lt;/span&gt;” option on the left-hand menu and we are ready to make some entries. The first is a &lt;span class="caps"&gt;DNS&lt;/span&gt; ‘A’ record or ‘address’. This is the most fundamental record and indicates the &lt;span class="caps"&gt;IP&lt;/span&gt; address of the domain, in this example, of&amp;nbsp;joelotz.com. &lt;/p&gt;
&lt;p&gt;Scroll down the page until you see the section “Custom resource records”. Most likely it is already set to ‘A’, if not, just click the drop-down and set it. To begin with you won’t see the &lt;span class="caps"&gt;IP&lt;/span&gt; addresses, you need to add those. What we are doing here is telling all the &lt;span class="caps"&gt;DNS&lt;/span&gt; servers, “if someone comes looking for joelotz.com go to one of these four server addresses &lt;em&gt;(which are at github)&lt;/em&gt;.” These &lt;span class="caps"&gt;IP&lt;/span&gt; address come from the &lt;a href="https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-a-records-with-your-dns-provider"&gt;github docs&lt;/a&gt;. Enter an address and click the + sign to get another row. Once all four are entered hit the ‘Add’&amp;nbsp;button.&lt;/p&gt;
&lt;p&gt;&lt;img alt="customdomain-02" src="/images/2020/customdomain-02.png"&gt;&lt;/p&gt;
&lt;p&gt;Next, I don’t just want to forward traffic from joelotz.com to joelotz.github.io, I want the address to actually be joelotz.com. For this, we need to create a &lt;span class="caps"&gt;CNAME&lt;/span&gt; Record. This creates an alias from one domain name (joelotz.github.io) to another&amp;nbsp;(joelotz.com).&lt;/p&gt;
&lt;p&gt;In the same section as before, change the drop-down from an “A” to “&lt;span class="caps"&gt;CNAME&lt;/span&gt;”. Then add “www” to the far left field and your github pages address to the far&amp;nbsp;right.&lt;/p&gt;
&lt;p&gt;&lt;img alt="customdomain-03" src="/images/2020/customdomain-03.png"&gt;&lt;/p&gt;
&lt;p&gt;This is what it should look like when&amp;nbsp;completed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="customdomain-04" src="/images/2020/customdomain-04.png"&gt;&lt;/p&gt;
&lt;p&gt;I found it takes about 5 minutes for this information to propagate, so go grab an iced tea, you deserve it. For those extra-nerdy, you can verify that records are set by&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dig &amp;lt;domain&amp;gt; +nostats +nocomments +nocmd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command will perform a &lt;span class="caps"&gt;DNS&lt;/span&gt; lookup and display the answers that are returned from the name server(s). There is a bunch of fluff that is hidden with all the +no&amp;nbsp;flags. &lt;/p&gt;
&lt;p&gt;&lt;img alt="customdomain-06" src="/images/2020/customdomain-06.png"&gt;&lt;/p&gt;
&lt;h3&gt;Encrypted&amp;nbsp;Traffic&lt;/h3&gt;
&lt;p&gt;And now a statement on security and privacy, which are related but not the same… it is ridiculously easy to “see” what you are doing on the internet. This is currently used by all types of people, governments and large companies, to collect your data and information. The most easiest method of keeping your traffic private is to &lt;a href="https://www.eff.org/deeplinks/2018/12/how-https-everywhere-keeps-protecting-users-increasingly-encrypted-web"&gt;encrypt it&lt;/a&gt;. To do that you must browse the &lt;u&gt;https&lt;/u&gt; version of a site, but first you must have an https encrypted&amp;nbsp;version. &lt;/p&gt;
&lt;p&gt;Now that the &lt;span class="caps"&gt;DNS&lt;/span&gt; records are entered and propogated, go back to github pages repository. Scroll down until you see and then select “Enforce &lt;span class="caps"&gt;HTTPS&lt;/span&gt;”. According to Monarch&amp;nbsp;Wadia, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your github repo settings’ “Custom Domain” field &lt;strong&gt;*&lt;span class="caps"&gt;HAS&lt;/span&gt; to have “www” in it,*&lt;/strong&gt; and it &lt;span class="caps"&gt;HAS&lt;/span&gt; to have “Enforce &lt;span class="caps"&gt;HTTPS&lt;/span&gt;”&amp;nbsp;checked!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://medium.com/@monarchwadia/github-pages-setting-up-www-subdomain-with-ssl-https-aca9eca371d6"&gt;https://medium.com/@monarchwadia/github-pages-setting-up-www-subdomain-with-ssl-https-aca9eca371d6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="customdomain-07" src="/images/2020/customdomain-07.png"&gt;&lt;/p&gt;
&lt;p&gt;This is why I had you use “www” in front of your domain name way back in step 1. If I didn&amp;#8217;t then &lt;code&gt;https://joelotz.com&lt;/code&gt; would work but &lt;code&gt;https://www.joelotz.com&lt;/code&gt; would result in a Certificate Invalid&amp;nbsp;error. &lt;/p&gt;
&lt;h3&gt;Update  -&amp;nbsp;2020/11/14&lt;/h3&gt;
&lt;p&gt;This may be obvious to some of you, but I wanted to point something out that gave me some hassle. I use &lt;a href="https://pypi.org/project/pelican/"&gt;Pelican&lt;/a&gt; static-site generator to create my blog. When I generate the html files from markdown it completely erases the &amp;#8220;output&amp;#8221; folder and re-builds the blog. From there, I push the output folder to the github master branch to be served. The problem is&amp;#8230; was&amp;#8230; that I was blasting away the &lt;span class="caps"&gt;CNAME&lt;/span&gt; file that was created in github. I &lt;em&gt;assume&lt;/em&gt; this problem exists with Jekyll or other static-site platforms. The solution I found was to either have Pelican create this file as a static page when generating the blog. There are probably other solutions, but this worked for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;First, tell Pelican where to find the static file &amp;#8220;&lt;span class="caps"&gt;CNAME&lt;/span&gt;&amp;#8221;. Add these options to &lt;code&gt;pelicanconf.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or if you already have STATIC_PATHS, like an image folder, it would look something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now create a directory in the blog&amp;#8217;s content folder named &lt;code&gt;extra&lt;/code&gt; and in that folder a file named &lt;code&gt;CNAME&lt;/code&gt; as described above. When you generate the blog, i.e. &lt;code&gt;pelican content -o output -s pelicanconf.py&lt;/code&gt; the file &lt;code&gt;CNAME&lt;/code&gt; will be copied into the output folder. And more importantly when you push the output folder to github it won&amp;#8217;t blast your &lt;span class="caps"&gt;CNAME&lt;/span&gt;&amp;nbsp;file. &lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://docs.getpelican.com/en/latest/tips.html?highlight=static%20files#copy-static-files-to-the-root-of-your-site"&gt;https://docs.getpelican.com/en/latest/tips.html?highlight=static%20files#copy-static-files-to-the-root-of-your-site&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Batch Autocrop png Images in Gimp</title><link href="http://www.joelotz.com/blog/2020/batch-autocrop-png-images-in-gimp.html" rel="alternate"></link><published>2020-07-10T00:00:00+05:30</published><updated>2020-07-10T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-07-10:/blog/2020/batch-autocrop-png-images-in-gimp.html</id><summary type="html">&lt;p&gt;This article is to document the solution I found for batch auto-cropping a bunch of images within &lt;a href="https://www.gimp.org/"&gt;Gimp&lt;/a&gt;. Keep in mind that this runs the “Crop to Content” command within the Image menu, so if you can’t achieve what you want &lt;em&gt;within&lt;/em&gt; the program than this isn’t going …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is to document the solution I found for batch auto-cropping a bunch of images within &lt;a href="https://www.gimp.org/"&gt;Gimp&lt;/a&gt;. Keep in mind that this runs the “Crop to Content” command within the Image menu, so if you can’t achieve what you want &lt;em&gt;within&lt;/em&gt; the program than this isn’t going to give you different&amp;nbsp;results. &lt;/p&gt;
&lt;p&gt;To start, credit where credit is due. I didn’t want to learn how to write Gimp scripts so I found one from a Swede named Greg Hildström &lt;a href="http://www.hildstrom.com/projects/gimpscript/index.html"&gt;here&lt;/a&gt;, thanks&amp;nbsp;Greg!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;batch-autocrop.scm&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;autocrop&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;filelist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cadr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb nb-Type"&gt;null&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="n"&gt;filelist&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="n"&gt;filelist&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gimp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="n"&gt;RUN&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NONINTERACTIVE&lt;/span&gt;
                                              &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drawable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gimp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;autocrop&lt;/span&gt; &lt;span class="n"&gt;RUN&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NONINTERACTIVE&lt;/span&gt;
                                   &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;drawable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gimp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="n"&gt;RUN&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NONINTERACTIVE&lt;/span&gt;
                             &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;drawable&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gimp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;filelist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cdr&lt;/span&gt; &lt;span class="n"&gt;filelist&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Copy the &lt;code&gt;batch-autocrop.scm&lt;/code&gt; into the scripts&amp;nbsp;folder &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Where do Gimp scripts and plugin live? It’s easy to find out. Open Gimp and within the top menu bar select &lt;code&gt;Edit\Preferences\Folders&lt;/code&gt;, expand Folders out and Select “Scripts”. It is recommended to put your personal scripts into your configuration folder as circled in red&amp;nbsp;below. &lt;/p&gt;
&lt;p&gt;&lt;img alt="image of Gimp menu items" src="/images/2020/GimpCrop-00.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Within a terminal change into the directory of images you want to crop and run the&amp;nbsp;script &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gimp -i -b &lt;span class="s1"&gt;&amp;#39;(batch-autocrop &amp;quot;*.PNG&amp;quot;)&amp;#39;&lt;/span&gt; -b &lt;span class="s1"&gt;&amp;#39;(gimp-quit 0)&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="terminal view of batch command" src="/images/2020/GimpCrop-01.png"&gt;&lt;/p&gt;
&lt;p&gt;If you are interested in what you just did continue&amp;nbsp;reading. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gimp&lt;/code&gt; is the command, you can run &lt;code&gt;gimp -h&lt;/code&gt; to view the help&amp;nbsp;page &lt;/li&gt;
&lt;li&gt;The flag &lt;code&gt;-i&lt;/code&gt; means run without a user&amp;nbsp;interface&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-b&lt;/code&gt; means run a batch&amp;nbsp;command&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Look up at the first line of the .scm script and you will see the definition of the batch command = “batch-autocrop pattern”. &lt;code&gt;batch-autocrop&lt;/code&gt; is the command name and &lt;code&gt;pattern&lt;/code&gt; is the input pattern of files you want to operate on. I don’t know why you need to wrap the batch command in both quotes and paranthesis, it seems to me that either one would be enough to differentiate the input, but regardless… the first batch command is &lt;code&gt;gimp -i -b '(batch-autocrop “*.PNG”)'&lt;/code&gt; because I want to operate on everything in the current folder that ends with “.&lt;span class="caps"&gt;PNG&lt;/span&gt;”. For my particular configuration, capitalization was important; e.g. “.png” vs “.&lt;span class="caps"&gt;PNG&lt;/span&gt;” made a&amp;nbsp;difference. &lt;/p&gt;
&lt;p&gt;Lastly we need to close out the session because we don’t have an interface. This is another batch command &lt;code&gt;-b  '(gimp-quit 0)'&lt;/code&gt; meaning quite Gimp&amp;nbsp;now. &lt;/p&gt;
&lt;p&gt;And there you have&amp;nbsp;it!&lt;/p&gt;</content><category term="misc"></category><category term="Gimp"></category></entry><entry><title>N-Queens Puzzle, Part 2.5-Brute Force Algorithm (All Solutions)</title><link href="http://www.joelotz.com/blog/2020/n-queens-puzzle-part-25-brute-force-algorithm-all-solutions.html" rel="alternate"></link><published>2020-07-06T00:00:00+05:30</published><updated>2020-07-06T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-07-06:/blog/2020/n-queens-puzzle-part-25-brute-force-algorithm-all-solutions.html</id><summary type="html">&lt;p&gt;This article is Part 2.5 in a series implementing different algorithms to solve the N-Queens problem. I named it 2.5 because it is an extension of &lt;a href="n-queens-puzzle-part-2-brute-force-algorithm.html"&gt;Part 2&lt;/a&gt; where I implemented the Brute Force Search Algorithm. In that algorithm I stopped evaluating the candidates once a solution was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is Part 2.5 in a series implementing different algorithms to solve the N-Queens problem. I named it 2.5 because it is an extension of &lt;a href="n-queens-puzzle-part-2-brute-force-algorithm.html"&gt;Part 2&lt;/a&gt; where I implemented the Brute Force Search Algorithm. In that algorithm I stopped evaluating the candidates once a solution was found. While it involves much more computation, in this implementation I continue to evaluate the candidates to provide &lt;em&gt;all&lt;/em&gt;&amp;nbsp;solutions. &lt;/p&gt;
&lt;p&gt;See the first article &lt;a href="n-queens-puzzle-part-1-introduction.html"&gt;&amp;#8220;Part 1-Introduction&amp;#8221;&lt;/a&gt; for an overview of the puzzle and some background&amp;nbsp;information.&lt;/p&gt;
&lt;h3&gt;Solution&amp;nbsp;Set&lt;/h3&gt;
&lt;p&gt;For a given number of queens there can be many solutions that satisfy the problem. Not surprisingly, as the size of the board (NxN) and number of queens (N) increases so does the number of solutions. Here is a table from &lt;a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle#Counting_solutions"&gt;Wikipedia&lt;/a&gt; that show number of fundamental solutions per number of&amp;nbsp;queens. &lt;/p&gt;
&lt;p&gt;&lt;img alt="NQueens_Solution_Table" src="/images/2020/NQueens_2-01.png"&gt;&lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;As in &lt;a href="n-queens-puzzle-part-2-brute-force-algorithm.html"&gt;Part2&lt;/a&gt; I used an optimized Python library called &lt;code&gt;itertools&lt;/code&gt; to calculate the combinations and permutations. The only big difference is that this code evaluates all the permutations as a solution whereas Part2 code loops through each permutation and stops when it finds a&amp;nbsp;solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#### IMPORTS&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;

&lt;span class="c1"&gt;#### FUNCTIONS ####&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_empty_board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Create an NxN board of zeros&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perm_to_board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Makes a board from a given permutation&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_empty_board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ndx&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ndx&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;ndx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Pretty print the board.&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Check if input array contains queens on the same diagonal&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Given two queens, they are on the same diagonal if the horizontal&lt;/span&gt;
    &lt;span class="c1"&gt;#  distance between them is equal to the vertical distance between&lt;/span&gt;
    &lt;span class="c1"&gt;#  them.&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# Cells (row1,col1) and (row2,col2) are on the same diagonal, &lt;/span&gt;
    &lt;span class="c1"&gt;#  if and only if, |row1-row2|=|col1-col2|. &lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# Remember, permutations care about order whereas combinations do not&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Find all possible permuations of 0-(N-1)&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_solutions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_permutations&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Utility function that checks validity of each solution&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;solutions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_permutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;solutions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;solutions&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# input size of board = number of queens&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;How many queens to place?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# convert input string to a number&lt;/span&gt;
    &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 

    &lt;span class="n"&gt;all_permuations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;solutions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_solutions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_permuations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;There are&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solutions&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;solutions found.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;print_board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solutions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="Python"></category></entry><entry><title>N-Queens Puzzle, Part 2-Brute Force Algorithm</title><link href="http://www.joelotz.com/blog/2020/n-queens-puzzle-part-2-brute-force-algorithm.html" rel="alternate"></link><published>2020-07-03T00:00:00+05:30</published><updated>2020-07-03T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-07-03:/blog/2020/n-queens-puzzle-part-2-brute-force-algorithm.html</id><summary type="html">&lt;p&gt;This article is number 2 in a series implementing different alogrithms to solve the N-Queens problem. See the first article &lt;a href="n-queens-puzzle-part-1-introduction.html"&gt;&amp;#8220;Part 1-Introduction&amp;#8221;&lt;/a&gt; for an overview of the puzzle and some background&amp;nbsp;information.&lt;/p&gt;
&lt;p&gt;In this article I&amp;#8217;m going to implement a Brute-Force algorithm in python to find solutions to the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is number 2 in a series implementing different alogrithms to solve the N-Queens problem. See the first article &lt;a href="n-queens-puzzle-part-1-introduction.html"&gt;&amp;#8220;Part 1-Introduction&amp;#8221;&lt;/a&gt; for an overview of the puzzle and some background&amp;nbsp;information.&lt;/p&gt;
&lt;p&gt;In this article I&amp;#8217;m going to implement a Brute-Force algorithm in python to find solutions to the N-Queens&amp;nbsp;puzzle. &lt;/p&gt;
&lt;h3&gt;Brute-Force Search&amp;nbsp;Algorithm&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Brute-force_search"&gt;Brute-Force Algorithm&lt;/a&gt; involves finding all possible permutations of the queen positions and then evaluating each to determine if it is a valid solution. This is typically one of the easier search algorithms to implement and it will always find a solution if it exists, however, the computational cost is proportional to the number of candidates and increases to be impractical very quickly. This is known as “combinatorial explosion” and limits the use of this algorithm as the computational cost of finding a solution grows exponentially as the search space&amp;nbsp;increases.&lt;/p&gt;
&lt;p&gt;In this “brute force” algorithm we find the solution by looking at every position on an NxN board, N times, for N queens. Assuming the reader understands &lt;a href="https://en.wikipedia.org/wiki/Big_O_notation"&gt;Big O Notation&lt;/a&gt;, this means &lt;span class="math"&gt;\(O(N^N)\)&lt;/span&gt;  time complexity!!&amp;nbsp;Wow.&lt;/p&gt;
&lt;h3&gt;Dimensionality Reduction via&amp;nbsp;Encoding&lt;/h3&gt;
&lt;p&gt;One method of time complexity is to reduce the computations, we reduce computations by reducing the search space, we reduce the search space by reducing dimensionality. For the N-Queens problem we can do that heuristically by recognizing  we can have only one queen in the row or&amp;nbsp;column. &lt;/p&gt;
&lt;p&gt;For the remainder of this article, I’ll be using an N=4 example.  In the particular solution below, a 4x4 board has 4 queens placed on it, denoted by red X&amp;#8217;s. The indices are &lt;a href="https://en.wikipedia.org/wiki/Zero-based_numbering"&gt;zero indexed&lt;/a&gt;, meaning they start at zero. For a generalized NxN grid (aka. board) the indices go from 0 to N-1. For the time being, it doesn’t matter where the queens are placed, assume this example is a random&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example (\(n=4\)) Board " src="/images/2020/NQueens_1_00.png"&gt;&lt;/p&gt;
&lt;p&gt;One way of encoding the queen locations are  to use a list of ordered pairs representing the row and column&amp;nbsp;positions.&lt;/p&gt;
&lt;div class="math"&gt;$$[ (row_0,col_0), (row_1,col_1), (row_{N-1},...,col_{N-1}) ]$$&lt;/div&gt;
&lt;p&gt;The above example can be encoded as [ (1,0),(3,1),(0,2),(2,3)], that is a queen is located at position (1,0), position (3,1), and so on as shown in the image&amp;nbsp;below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example Board with Queen Locations Encoded" src="/images/2020/NQueens_1_02.png"&gt;&lt;/p&gt;
&lt;p&gt;We can reduce the dimensionality by recognizing the column value is already represented by the location within the&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example Reducing Dimensionality" src="/images/2020/NQueens_1_03.png"&gt;&lt;/p&gt;
&lt;p&gt;Therefore, this example can be encoded as &lt;span class="math"&gt;\([1,3,0,2]\)&lt;/span&gt; - where by definition, there can only be a single queen in each column, thus eliminating one dimension that needs to be&amp;nbsp;searched.&lt;/p&gt;
&lt;h3&gt;Relationships =&amp;nbsp;Combinations&lt;/h3&gt;
&lt;p&gt;I showed how we can encode our queen placement as an ordered list,  &lt;span class="math"&gt;\(Queens=[1,3,0,2]\)&lt;/span&gt;, now we can discuss the interaction or relationship between each of them. Mathematically these are called &lt;a href="https://en.wikipedia.org/wiki/Combination"&gt;combinations&lt;/a&gt;. Given a collection of queens, we can show each possible interaction between any two queens as &lt;span class="math"&gt;\(\binom {Queens}k\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Example Combinations" src="/images/2020/NQueens_1_01.png"&gt;&lt;/p&gt;
&lt;p&gt;The combination &lt;span class="math"&gt;\(A=(0,1)\)&lt;/span&gt; is the interaction between the queen in row 0 and the queen in row 1, as so&amp;nbsp;on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;I used python3 language for the code to implement this algorithm. It could have been written in nearly anything, but I like python. It also has a great library named &lt;code&gt;itertools&lt;/code&gt; which provides very optimized functions for iterative functionality. I took advantage of this library, specifically, the optimized permutation and combination&amp;nbsp;functions. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#### IMPORTS&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;

&lt;span class="c1"&gt;#### FUNCTIONS ####&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_empty_board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Create an NxN board of zeros&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perm_to_board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Makes a full board board from a given permutation&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_empty_board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ndx&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ndx&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;ndx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Pretty print utility function&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; =&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;print_board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm_to_board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Check if input array contains queens on the same diagonal&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Find all possible permuations of 0-(N-1)&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_first_solutions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_permutations&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Utility function that checks validity of each solution&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_permutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# input size of board = number of queens&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;How many queens to place?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# convert input string to a number&lt;/span&gt;
    &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 

    &lt;span class="c1"&gt;# find all permutations of N queens&lt;/span&gt;
    &lt;span class="n"&gt;all_permuations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# go through all perms, return first valid one&lt;/span&gt;
    &lt;span class="n"&gt;perm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_first_solutions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_permuations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# pretty print the perm and board&lt;/span&gt;
    &lt;span class="n"&gt;print_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So what is going on here? First I ask the user how many queens to place on an NxN board. Then find all permutations of 0-N as possible candidates. I then evaluate each one until a solution is found. As explained in a previous section, the problem is constrained such that there is only one queen in each column. By looking for permutations of only &lt;span class="math"&gt;\([0,1,2,...,N]\)&lt;/span&gt; I further constrained the problem to only one queen in each row in my permutation definition. This leaves the validation to only having to evaluate whether the candidate location is blocked by an existing queen on the diagonal. A tricky solution to this is recognizing that given two queens, they are on the same diagonal if and only if the horizontal distance between them is equal to the vertical distance between&amp;nbsp;them. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Example Showing Queen Distance Calculation" src="/images/2020/NQueens_1_04.png"&gt;&lt;/p&gt;
&lt;p&gt;Referring to the above image, the horizontal distance (&lt;em&gt;h&lt;/em&gt;) between the two points is &lt;span class="math"&gt;\(\lvert 2-0 \rvert\)&lt;/span&gt;, and the vertical distance (&lt;em&gt;v&lt;/em&gt;) between the two points is &lt;span class="math"&gt;\(\lvert 0-2 \rvert\)&lt;/span&gt;. Those values are equal to each other so the two points are on a diagonal from each other and are not valid&amp;nbsp;placements. &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "2em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="misc"></category><category term="Python"></category></entry><entry><title>N-Queens Puzzle, Part 1-Introduction</title><link href="http://www.joelotz.com/blog/2020/n-queens-puzzle-part-1-introduction.html" rel="alternate"></link><published>2020-06-26T00:00:00+05:30</published><updated>2020-06-26T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-06-26:/blog/2020/n-queens-puzzle-part-1-introduction.html</id><summary type="html">&lt;p&gt;The N-Queens puzzle is the popular problem of placing N number of chess queens on an NxN grid board such that no queens cannot attack each other; i.e no two queens share the same row, column, or diagonal. The puzzle is often generalized to the “&lt;a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle"&gt;8 Queens Puzzle&lt;/a&gt;” to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The N-Queens puzzle is the popular problem of placing N number of chess queens on an NxN grid board such that no queens cannot attack each other; i.e no two queens share the same row, column, or diagonal. The puzzle is often generalized to the “&lt;a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle"&gt;8 Queens Puzzle&lt;/a&gt;” to match a standard size chess board and is a good example of a simple but nontrivial algorithm&amp;nbsp;problem. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is known that a solution exists for all&amp;nbsp;N&amp;gt;3&lt;/li&gt;
&lt;li&gt;It gets &lt;em&gt;very&lt;/em&gt; difficult to do by hand for&amp;nbsp;N&amp;gt;7&lt;/li&gt;
&lt;li&gt;Good candidate for computer (programmatic)&amp;nbsp;solution&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Combinations and&amp;nbsp;Permutations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Combination"&gt;Combinations&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Permutation"&gt;permutations&lt;/a&gt; are often confused; for our purposes I will simply say that one cares about order while the other does not, and this makes a difference. In combinations the pair &lt;span class="math"&gt;\((0,1)\)&lt;/span&gt; is the same as &lt;span class="math"&gt;\((1,0)\)&lt;/span&gt;. This is good for relationships or interactions because the interaction between John and Bill is the same and between Bill and John, we don’t care about&amp;nbsp;order. &lt;/p&gt;
&lt;p&gt;On the other hand, let’s say… for example… I want to calculate all the possible locations of queens without duplication of rows. So given a list of objects &lt;span class="math"&gt;\([A,B,C,D]\)&lt;/span&gt; or, in our example case, the four possible rows &lt;span class="math"&gt;\([0,1,2,3]\)&lt;/span&gt;, how many different ways can we arrange the queens with one on each&amp;nbsp;row?
&lt;/p&gt;
&lt;div class="math"&gt;$$ P_N = N! $$&lt;/div&gt;
&lt;div class="math"&gt;$$ P_4 = 4!= 4 \cdot 3 \cdot 2 \cdot 1 = 24$$&lt;/div&gt;
&lt;p&gt;Now is a good time to finally break out &lt;code&gt;python&lt;/code&gt; and the standard library &lt;a href="https://docs.python.org/2/library/itertools.html"&gt;itertools&lt;/a&gt;. Here we can just ask itertools to create all the permutations of [0,1,2,3] for us. Note the result from itertools is an &lt;a href="https://www.geeksforgeeks.org/iterators-in-python/"&gt;iterator&lt;/a&gt; so to view it (i.e. print it) we must turn the iterator into a&amp;nbsp;list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="n"&gt;perms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Above are all the possible locations of our queens. Since this is a python list we can view the length of it. For a 4x4 grid there are 24 possible locations of 4 queens on different&amp;nbsp;rows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Solutions&lt;/h3&gt;
&lt;p&gt;Now the part we&amp;#8217;ve all been waiting for&amp;#8230;how do we find the solution(s) to our puzzle? The different methods and algorithms of finding the solution is the fun part and the entire point of this series of articles. I will look at the popular algorithms as a exercise in my python coding skills and an opportunity to learn something&amp;nbsp;new. &lt;/p&gt;
&lt;p&gt;See the next articles were I find solutions using the following&amp;nbsp;algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="n-queens-puzzle-part-2-brute-force-algorithm.html"&gt;Part 2 - Brute&amp;nbsp;Force&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n-queens-puzzle-part-25-brute-force-algorithm-all-solutions.html"&gt;Part 2.5 - Brute Force (All&amp;nbsp;Solutions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="n-queens-puzzle-part-3-backtracking-algorithm-all-solutions.html"&gt;Part 3 -&amp;nbsp;Backtracking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3.5 - Backtracking with&amp;nbsp;Threading&lt;/li&gt;
&lt;li&gt;Branch and&amp;nbsp;Bound&lt;/li&gt;
&lt;li&gt;Genetic&amp;nbsp;Algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "2em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="misc"></category><category term="Python"></category></entry><entry><title>Shell Script to Write Your Weight to a csv Log File</title><link href="http://www.joelotz.com/blog/2020/shell-script-to-write-your-weight-to-a-csv-log-file.html" rel="alternate"></link><published>2020-06-19T00:00:00+05:30</published><updated>2020-06-19T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-06-19:/blog/2020/shell-script-to-write-your-weight-to-a-csv-log-file.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;u&gt;(2020/06/17)&lt;/u&gt;&lt;/strong&gt;: Updated post with the script version&amp;nbsp;0.2.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been exercising lately and I wanted to see the progress of my weight loss; so I write a stupid little script to log my weight from the terminal. I&amp;#8217;m posting it because I learned a couple …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;&lt;u&gt;(2020/06/17)&lt;/u&gt;&lt;/strong&gt;: Updated post with the script version&amp;nbsp;0.2.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been exercising lately and I wanted to see the progress of my weight loss; so I write a stupid little script to log my weight from the terminal. I&amp;#8217;m posting it because I learned a couple tricks in the writing of the shell script and thought someone else may as&amp;nbsp;well. &lt;/p&gt;
&lt;p&gt;First, it can be placed anywhere but I recommend somewhere in your &lt;span class="caps"&gt;PATH&lt;/span&gt; so that you can execute it from anywhere. A good place is &lt;code&gt;/usr/local/bin/&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;logweight --help&lt;/code&gt; to see the usage syntax and&amp;nbsp;examples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Usage:

  logweight input &lt;span class="o"&gt;[&lt;/span&gt;option&lt;span class="o"&gt;]&lt;/span&gt;

Input:
        -w, --weight      Weight value desired to log. Default in pounds &lt;span class="o"&gt;(&lt;/span&gt;lbs&lt;span class="o"&gt;)&lt;/span&gt;
                           Use optional -c,--convert flag to convert kgs to lbs and log in lbs.
                           Use optional -k,--kilograms flag to log in kilograms.

Simple Examples:
        logweight --weight&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;                  Creates a log entry &lt;span class="k"&gt;for&lt;/span&gt; 200lbs &lt;span class="k"&gt;for&lt;/span&gt; the current date
        logweight -w&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;                        Creates a log entry &lt;span class="k"&gt;for&lt;/span&gt; 200lbs &lt;span class="k"&gt;for&lt;/span&gt; the current date
        logweight --weight&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;.7 --convert       Creates a log entry &lt;span class="k"&gt;for&lt;/span&gt; 200lbs &lt;span class="k"&gt;for&lt;/span&gt; the current date

Options:
        -d, --date        Log date in valid &lt;span class="s1"&gt;&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span&gt; format. If not specified the current UTC date is used.
        -f, --file        Log file path and name. The default is /mnt/DataDrive/Documents/WeightLog.txt.
        -n, --note        Adds a note string to the log entry. The default is blank.
        -k, --kilograms   Save weight value as kilogram units. Default is standard pounds.
        -c, --convert     Assumes the input weight is in kilograms but converts the value and logs in pounds.
        -l, --pounds      Save weight value as standard pound units. This is the default.
        -p, --noprint     Supresses the printing to the terminal the data that is written into log file.
        -v, --version     Prints the version of this shell script.
        -h, --help        Displays this &lt;span class="nb"&gt;help&lt;/span&gt; message.
        -b, --debug       Does not write to file - but prints the data that would be written

Examples:
        logweight --weight&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;.6 --date&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-01-01            Creates a log entry &lt;span class="k"&gt;for&lt;/span&gt; the specified day
        logweight --weight&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;.6 --note&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Taken after run&amp;quot;&lt;/span&gt;     Creates a log entry on the current date with a user note
        logweight --weight&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;.6 --kilograms                  Creates a log entry in kilograms on the current date
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is the raw file that you can&amp;nbsp;use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c1"&gt;# A shell script to log personal body weights into /mnt/DataDrive/Documents/WeightLog.txt file&lt;/span&gt;
&lt;span class="c1"&gt;# Written by: Joe Lotz&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Version 0.1 (2020/June/11) = Initial Release&lt;/span&gt;
&lt;span class="c1"&gt;# Version 0.2 (2020/June/15) = switched the print flag to a no-print flag, added note field&lt;/span&gt;
&lt;span class="c1"&gt;# --------------------------------------------------------------&lt;/span&gt;

&lt;span class="c1"&gt;#### Set variables&lt;/span&gt;
&lt;span class="nv"&gt;VERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.2&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;UNITS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lbs&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;NOW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt; date -u &lt;span class="s1"&gt;&amp;#39;+%F&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/mnt/DataDrive/Documents/WeightLog.txt&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;VERBOSE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;NOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;#### Parse input arguments&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; in
    -w&lt;span class="o"&gt;=&lt;/span&gt;*&lt;span class="p"&gt;|&lt;/span&gt;--weight&lt;span class="o"&gt;=&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;WEIGHT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;#*=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
    -d&lt;span class="o"&gt;=&lt;/span&gt;*&lt;span class="p"&gt;|&lt;/span&gt;--date&lt;span class="o"&gt;=&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;DATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;#*=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Check if valid date input&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;`date &amp;#39;+%Y-%m-%d&amp;#39; -d &lt;/span&gt;&lt;span class="nv"&gt;$DATE&lt;/span&gt;&lt;span class="s2"&gt; 2&amp;gt;/dev/null`&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DATE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nv"&gt;NOW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$DATE&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n\e[91m-------ERROR-------\e[0m\nInput date &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not valid, specify as: &amp;#39;YYYY-MM-DD&amp;#39;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
    -f&lt;span class="o"&gt;=&lt;/span&gt;*&lt;span class="p"&gt;|&lt;/span&gt;--file&lt;span class="o"&gt;=&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;#*=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
    -n&lt;span class="o"&gt;=&lt;/span&gt;*&lt;span class="p"&gt;|&lt;/span&gt;--note&lt;span class="o"&gt;=&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;NOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;#*=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
    -l&lt;span class="p"&gt;|&lt;/span&gt;--pounds&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;UNITS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;lbs
    &lt;span class="p"&gt;;;&lt;/span&gt;
    -k&lt;span class="p"&gt;|&lt;/span&gt;--kilograms&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;UNITS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kgs
    &lt;span class="p"&gt;;;&lt;/span&gt;
    -c&lt;span class="p"&gt;|&lt;/span&gt;--convert&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$WEIGHT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$UNITS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;kgs&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; 
    &lt;span class="k"&gt;then&lt;/span&gt; :
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$WEIGHT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt; 
        &lt;span class="nv"&gt;WEIGHT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$WEIGHT&lt;/span&gt;&lt;span class="s2"&gt; * 2.20462&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;bc -l &lt;span class="p"&gt;|&lt;/span&gt; xargs &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%.1f&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;UNITS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kgs
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n\e[91m-------ERROR-------\e[0m\nWEIGHT value is empty, specify as:\n    &amp;#39;logweight 200 -c&amp;#39; or\n    &amp;#39;logweight --weight=200 --convert&amp;#39; or\n    &amp;#39;logweight -w 200 -c&amp;#39;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;    
    -v&lt;span class="p"&gt;|&lt;/span&gt;--version&lt;span class="o"&gt;)&lt;/span&gt;                                   
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Version: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;         
    &lt;span class="p"&gt;;;&lt;/span&gt;
    -b&lt;span class="p"&gt;|&lt;/span&gt;--debug&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
    -np&lt;span class="p"&gt;|&lt;/span&gt;--noprint&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;VERBOSE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
    -h&lt;span class="p"&gt;|&lt;/span&gt;--help&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\nUsage:\n\n  logweight input [option]\n\nInput:\n        -w, --weight      Weight value desired to log. Default in pounds (lbs)\n                           Use optional -c,--convert flag to convert kgs to lbs and log in lbs.\n                           Use optional -k,--kilograms flag to log in kilograms.\n\nSimple Examples:\n        logweight --weight=200                  Creates a log entry for 200lbs for the current date\n        logweight -w=200                        Creates a log entry for 200lbs for the current date\n        logweight --weight=90.7 --convert       Creates a log entry for 200lbs for the current date\n\nOptions:\n        -d, --date        Log date in valid &amp;#39;YYYY-MM-DD&amp;#39; format. If not specified the current UTC date is used.\n        -f, --file        Log file path and name. The default is &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.\n        -n, --note        Adds a note string to the log entry. The default is blank.\n        -k, --kilograms   Save weight value as kilogram units. Default is standard pounds.\n        -c, --convert     Assumes the input weight is in kilograms but converts the value and logs in pounds.\n        -l, --pounds      Save weight value as standard pound units. This is the default.\n        -p, --noprint     Supresses the printing to the terminal the data that is written into log file.\n        -v, --version     Prints the version of this shell script.\n        -h, --help        Displays this help message.\n        -b, --debug       Does not write to file - but prints the data that would be written\n\nExamples:\n        logweight --weight=200.6 --date=2020-01-01            Creates a log entry for the specified day\n        logweight --weight=200.6 --note=\&amp;quot;Taken after run\&amp;quot;     Creates a log entry on the current date with a user note\n        logweight --weight=200.6 --kilograms                  Creates a log entry in kilograms on the current date\n&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
    *&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n\e[91m-------ERROR-------\e[0m\nUnknown input argument, check your syntax.\nSee help file by typing  &amp;#39;logweight --help&amp;#39;\n&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$WEIGHT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n\e[91m-------ERROR-------\e[0m\nWEIGHT value is empty, specify as:\n    &amp;#39;logweight 200&amp;#39; or\n    &amp;#39;logweight --weight=200&amp;#39; or\n    &amp;#39;logweight -w 200&amp;#39;\n&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NOW&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WEIGHT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;UNITS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NOTE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$VERBOSE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Log file: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\nEntry: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DEBUG&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$OUTPUT&lt;/span&gt; &amp;gt;&amp;gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="Bash"></category></entry><entry><title>Installing ClamAV on Ubuntu</title><link href="http://www.joelotz.com/blog/2020/installing-clamav-on-ubuntu.html" rel="alternate"></link><published>2020-06-05T00:00:00+05:30</published><updated>2020-06-05T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-06-05:/blog/2020/installing-clamav-on-ubuntu.html</id><summary type="html">&lt;p&gt;Linux is not immune to security threats like malware and viruses, however, there is a large debate around whether or not anti-virus software is needed on&amp;nbsp;linux. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.howtogeek.com/135392/htg-explains-why-you-dont-need-an-antivirus-on-linux-and-when-you-do/"&gt;Why You Don’t Need an Antivirus On Linux&amp;nbsp;(Usually)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linuxhint.com/why_no_antivirus_linux/"&gt;Why You Still Don’t Need Antivirus Software on Linux in&amp;nbsp;2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.ubuntu.com/stable/ubuntu-help/net-antivirus.html.en"&gt;Do …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Linux is not immune to security threats like malware and viruses, however, there is a large debate around whether or not anti-virus software is needed on&amp;nbsp;linux. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.howtogeek.com/135392/htg-explains-why-you-dont-need-an-antivirus-on-linux-and-when-you-do/"&gt;Why You Don’t Need an Antivirus On Linux&amp;nbsp;(Usually)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linuxhint.com/why_no_antivirus_linux/"&gt;Why You Still Don’t Need Antivirus Software on Linux in&amp;nbsp;2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.ubuntu.com/stable/ubuntu-help/net-antivirus.html.en"&gt;Do I need anti-virus&amp;nbsp;software?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.comparitech.com/antivirus/does-linux-need-antivirus/"&gt;Does Linux need&amp;nbsp;antivirus?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post will explain why I choose to install anti-virus software, how to install, and how to setup a cron job for automatically executing&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;If you quickly browse the articles listed above or do your own google search you find strong advocates on both sides of the fence. The official Ubuntu website says &amp;#8220;Anti-virus software does exist for Linux, but you probably don’t need to use it. Viruses that affect Linux are still very rare. &amp;#8221; I largely follow this logic but add a little twist - I think if you engage in risky behavior you need to protect yourself. So let&amp;#8217;s say, for example, that someone downloads music torrents or cracked ebooks, hypothetically. These come from shady sources and are great opportunities for infecting your system with virus, &lt;a href="https://nakedsecurity.sophos.com/2012/11/27/flaming-retort-linux-rootkit-news-provides-some-comic-relief/"&gt;rootkits&lt;/a&gt;, &lt;a href="https://www.zdnet.com/article/this-new-ransomware-is-targeting-windows-and-linux-pcs-with-a-unique-attack/"&gt;ransomware&lt;/a&gt;, or botnets. So while I don&amp;#8217;t scan the entire system, every night I scan my ~/Downloads/, ~/Torrents/, and ~/Music/ directories. I think if you host any servers like an email server, &lt;span class="caps"&gt;FTP&lt;/span&gt; server, or a Samba File server you should probably scan those too. If you agree with me, I&amp;#8217;ll show you how to easily install and setup &lt;a href="https://www.clamav.net/"&gt;ClamAV&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Simply update and install the&amp;nbsp;packages;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update
sudo apt install clamav clamav-daemon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can verify&amp;nbsp;installation;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;clamscan --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By default, ClamAV will do a check for new virus definitions every hour, if you want to change this parameter you can edit the file &lt;code&gt;/etc/clamav/freshclam.conf&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gedit /etc/clamav/freshclam.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And change the following&amp;nbsp;line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check for new database 24 times a day&lt;/span&gt;
Checks &lt;span class="m"&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check for new database 1 times a day&lt;/span&gt;
Checks &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The virus database is going to most-likely be out of date since it hasn&amp;#8217;t had a chance to update. &amp;#8220;Freshclam&amp;#8221; is the daemon that updates the database. To manually update the virus database, first stop the freshclam&amp;nbsp;service;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl stop clamav-freshclam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then update the&amp;nbsp;database;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo freshclam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then restart it and enable to run on system&amp;nbsp;boot/startup;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl start clamav-freshclam
systemctl is-enabled clamav-freshclam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here are some good articles on all the different options you can&amp;nbsp;use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://vitux.com/secure-ubuntu-with-clamav-antivirus/&lt;/li&gt;
&lt;li&gt;https://kifarunix.com/install-and-use-clamav-on-ubuntu-20-04/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is my&amp;nbsp;command;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;clamscan --remove&lt;span class="o"&gt;=&lt;/span&gt;yes --recursive&lt;span class="o"&gt;=&lt;/span&gt;yes --verbose /home/joe/Downloads/ /mnt/DataDrive/Music/ &lt;span class="p"&gt;|&lt;/span&gt; grep FOUND &amp;gt;&amp;gt; /home/joe/VirusScanReports/virus-scan-report-&lt;span class="sb"&gt;`&lt;/span&gt;date +&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can view the options via &lt;code&gt;clamscan --help&lt;/code&gt;, but I&amp;#8217;ll decipher my&amp;nbsp;choices.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--remove=yes&lt;/code&gt; means &amp;#8220;Remove any infected files&amp;#8221;, this can be slightly dangerous if you are scanning system files as removing a file can bonk-up things. In my case I&amp;#8217;m scanning files that I know are &amp;#8220;meaningless&amp;#8221; so blast them away if they are&amp;nbsp;infected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--recursive=yes&lt;/code&gt; means &amp;#8220;Scan sub-directories recursively&amp;#8221;, this is&amp;nbsp;obvious.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--verbose&lt;/code&gt; means&amp;#8230;well, &amp;#8220;Be verbose&amp;#8221;. It can take a while to scan large directories, especially if you choose the whole system, and when it&amp;#8217;s scanning and not showing anything I get scared that maybe something locked up. So I like to see the output to know that it&amp;#8217;s actually working and&amp;nbsp;scanning. &lt;/li&gt;
&lt;li&gt;And then you list your directory/directories&amp;nbsp;afterwards. &lt;/li&gt;
&lt;li&gt;You could even exclude a directory from being scanned with a flag like this&amp;nbsp;`&amp;#8212;exclude-dir=&amp;#8221;^/systemDir&amp;#8221;&lt;/li&gt;
&lt;li&gt;Finally, pipe the report on any “found” viruses to a text&amp;nbsp;file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a side note, my commands are verbose as well. I tend to not use the flags, like &lt;code&gt;-v&lt;/code&gt; instead of &lt;code&gt;–-verbose&lt;/code&gt;  because 3 months from now when I look back I have a tendency to forget what the flags stand for.  So while I could use &lt;code&gt;-r&lt;/code&gt; I like to completely “spell it out” as &lt;code&gt;--recursive=yes&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Cron&amp;nbsp;tab&lt;/h3&gt;
&lt;p&gt;Access the system or root cron tab via &lt;code&gt;sudo crontab -e&lt;/code&gt; or you can specify your favorite text editor with &lt;code&gt;sudo EDITOR=gedit crontab -e&lt;/code&gt;. I have it specified to run every night at 2am, before my &lt;a href="running-freefilesync-backup-from-crontab-on-ubuntu.html"&gt;backup&lt;/a&gt;&amp;nbsp;runs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; * * * clamscan --remove&lt;span class="o"&gt;=&lt;/span&gt;yes --recursive&lt;span class="o"&gt;=&lt;/span&gt;yes --verbose /home/joe/Downloads/ /mnt/DataDrive/Music/ &lt;span class="p"&gt;|&lt;/span&gt; grep FOUND &amp;gt;&amp;gt; /home/joe/VirusScanReports/virus-scan-report-&lt;span class="sb"&gt;`&lt;/span&gt;date +&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Optional&amp;nbsp;Credit&lt;/h3&gt;
&lt;p&gt;I think I can improve on this by only saving a file if a virus is found. Currently, there is a log file saved everyday and if there is no virus then the file is empty. That’s a whole bunch of empty files to be looking at all the time. I could write a script that looks at the results and &lt;em&gt;only if&lt;/em&gt; it is &lt;em&gt;not empty&lt;/em&gt; then I could push the results to a Zenity message box or email myself. Since these are non-essential media files I think it would be easiest to just initiate a message&amp;nbsp;box. &lt;/p&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="ClamAV"></category></entry><entry><title>How to Create Custom FontAwesome Icons</title><link href="http://www.joelotz.com/blog/2020/how-to-create-custom-fontawesome-icons.html" rel="alternate"></link><published>2020-05-29T00:00:00+05:30</published><updated>2020-05-29T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-05-29:/blog/2020/how-to-create-custom-fontawesome-icons.html</id><summary type="html">&lt;p&gt;I installed a &amp;#8220;stardate&amp;#8221; plugin for my pelican generated blog and now I want an icon to show next to it like my standard date. I use &lt;a href="https://fontawesome.com/"&gt;FontAwesome&lt;/a&gt; but they don&amp;#8217;t have a standard icon for Star Trek - but they have Star Wars &lt;corporate bias!!! ;-) &gt; This article shows how to create …&lt;/corporate&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I installed a &amp;#8220;stardate&amp;#8221; plugin for my pelican generated blog and now I want an icon to show next to it like my standard date. I use &lt;a href="https://fontawesome.com/"&gt;FontAwesome&lt;/a&gt; but they don&amp;#8217;t have a standard icon for Star Trek - but they have Star Wars &lt;corporate bias!!! ;-) &gt; This article shows how to create a custom icon using &lt;a href="https://icomoon.io/"&gt;IcoMoon.io&lt;/a&gt;, a vey popular alternative to FontAwesome. I also found a tricky issue when I used both FontAwesome and my custom IcoMoon icon at the same&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Unless you are artistically gifted you will need to search the interwebs for a legal image to download. In fact, even if you are artistic, for most stuff an image has already been created. You will need a vector graphic .svg file, but I found that most stuff is created as a .png file. Don&amp;#8217;t worry, I&amp;#8217;ll show you how to convert your image to a vector graphic file in Ubuntu 20.04. I also found a tricky issue when I used both FontAwesome and my custom IcoMoon icon at the same&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;So look and find a clean black and white image for your icon. Remember that we are creating a FontAwesome type of icon so they will be small, so find something suitable. I found what I wanted on &lt;a href="http://clipart-library.com/"&gt;http://clipart-library.com/&lt;/a&gt; and downloaded a .png file to my desktop. Next, you will need &lt;a href="https://inkscape.org/"&gt;Inkscape&lt;/a&gt;. I’m pretty sure Inkscape comes pre-installed, but if not follow these &lt;a href="http://ubuntuhandbook.org/index.php/2020/05/install-inkscape-1-0-ppa-ubuntu-20-04-18-04/"&gt;installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Open the file in Inkscape and a png import option box will appear. I chose the following&amp;nbsp;options:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Inkscape png Import Options" src="/images/2020/fontawesome-01.png"&gt;&lt;/p&gt;
&lt;p&gt;Once the image is imported you must select &lt;code&gt;Path &amp;gt; Trace Bitmap…&lt;/code&gt; and another dialog box will appear. This box is a little wonky. It was suggested on another article to select the &lt;code&gt;Live Preview&lt;/code&gt; option so you know if everything is working. For me, I noticed a message on the bottom saying to “click the image” which is odd. So I clicked the background image and then the live preview worked. Like I said…wonky. Next click &lt;code&gt;OK&lt;/code&gt;. Nothing seems to happen and there is no feedback. But you can close the dialog box and save the image&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Inkscape" src="/images/2020/fontawesome-02.png"&gt;&lt;/p&gt;
&lt;p&gt;Next &lt;code&gt;Save As&lt;/code&gt; the file as a .svg&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Inkscape Save As Options" src="/images/2020/fontawesome-03.png"&gt;&lt;/p&gt;
&lt;p&gt;You can verify by opening the svg file in image&amp;nbsp;viewer.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example svg in Image Viewer" src="/images/2020/fontawesome-04.png"&gt;&lt;/p&gt;
&lt;p&gt;Now, browse to &lt;a href="http://icomoon.io"&gt;http://icomoon.io&lt;/a&gt; website. They make their money by selling icon packs, but draw you in with this custom icon service they provide for free. In the upper right, click the &lt;code&gt;IcoMoon App&lt;/code&gt; link.&lt;/p&gt;
&lt;p&gt;&lt;img alt="icomoon.io Website" src="/images/2020/fontawesome-05.png"&gt;&lt;/p&gt;
&lt;p&gt;In the new page, you will need to upload the svg file you just created for processing. Click the &lt;code&gt;Import Icons&lt;/code&gt; button, select the svg file, and click &lt;code&gt;Open&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Import Icons Location" src="/images/2020/fontawesome-06.png"&gt;&lt;/p&gt;
&lt;p&gt;You should now see your image under the &amp;#8220;Untitled Set&amp;#8221;. Select your image so that it glows amber and then select &lt;code&gt;Generate Font&lt;/code&gt; in the bottom&amp;nbsp;right. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Import Icons Continued" src="/images/2020/fontawesome-07.png"&gt;&lt;/p&gt;
&lt;p&gt;After processing you should see your icon in the results screen. Download a .zip file by clicking the &lt;code&gt;Download&lt;/code&gt; button in the bottom&amp;nbsp;right.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Download Location" src="/images/2020/fontawesome-08.png"&gt;&lt;/p&gt;
&lt;p&gt;Now that you have your icons you will need to integrate the &lt;span class="caps"&gt;CSS&lt;/span&gt; and call the icon in your html. Extract the zip directory and look inside. The only files you really need are the style.css file and the fonts generated my icomoon. There are several schools of thought on how to make customize a pelican theme, but the one I subscribe is to not edit the theme directly (if possible) but rather include your customizations. Meaning, I won&amp;#8217;t be editing the existing stylesheet, rather adding my custom&amp;nbsp;one. &lt;/p&gt;
&lt;p&gt;The stylesheets live in the &lt;code&gt;theme/&amp;lt;theme_name&amp;gt;/static/css/&lt;/code&gt; folder of my pelican theme. I renamed the icomoon stylesheet as &lt;code&gt;style_startrek.css&lt;/code&gt; (because&amp;#8230;why not) and moved it to this folder of my&amp;nbsp;theme. &lt;/p&gt;
&lt;p&gt;Now you need to move the font files. I am currently using Font Awesome and already have a font directory. In my theme this is simply &lt;code&gt;theme/&amp;lt;theme_name&amp;gt;/static/font/&lt;/code&gt;. Looking in this folder I see a bunch of different files title &lt;code&gt;fontawesome-webfont&lt;/code&gt;. Copy all the icomoon fonts into this folder. This is what the results looks like; notice both FontAwesome and my custom IcoMoon&amp;nbsp;fonts. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Example of icomoon Fonts in a Directory" src="/images/2020/fontawesome-11.png"&gt;&lt;/p&gt;
&lt;p&gt;Next, you need to slightly modify the &lt;code&gt;style_startrek.css&lt;/code&gt; to point to the relative location of these fonts. In my case, it was &lt;code&gt;../font/&amp;lt;files&amp;gt;&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Stylesheet Modifications" src="/images/2020/fontawesome-13.png"&gt;&lt;/p&gt;
&lt;p&gt;When I was first getting this work, I discovered that I could not get both FontAwesome and IcoMoon working at the same time. I had to comment out one or the other&amp;#8230;which implied they were stepping on each other. After an hour of debugging I realized they both are trying to claim the same &lt;span class="caps"&gt;CSS&lt;/span&gt; class. The simply solution was to change the IcoMoon to something that didn&amp;#8217;t start with &lt;code&gt;icon-&lt;/code&gt;. I took the easy road and simply changed &lt;code&gt;icon&lt;/code&gt; to &lt;code&gt;staricon&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Stylesheet Modifications Continued" src="/images/2020/fontawesome-14.png"&gt;&lt;/p&gt;
&lt;p&gt;Lastly, add the icon to your html. This is accomplished by adding the class name you defined in the css stylesheet. In my example above, this was &lt;code&gt;staricon-star_trek&lt;/code&gt;. Add this to the&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;staricon-star_trek&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also do all sorts of &lt;a href="https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use"&gt;neat styling&lt;/a&gt; to change the size, color, rotation, and other properties. In my case, I’m just adjusting the&amp;nbsp;color.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;staricon-star_trek&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color: #234764;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is the final&amp;nbsp;result!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example of Results!" src="/images/2020/fontawesome-15.png"&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="Pelican"></category><category term="FontAwesome"></category></entry><entry><title>Auto-generate and Publish Pelican Blog to Github Pages on Ubuntu</title><link href="http://www.joelotz.com/blog/2020/auto-generate-and-publish-pelican-blog-to-github-pages-on-ubuntu.html" rel="alternate"></link><published>2020-05-22T00:00:00+05:30</published><updated>2020-05-22T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-05-22:/blog/2020/auto-generate-and-publish-pelican-blog-to-github-pages-on-ubuntu.html</id><summary type="html">&lt;p&gt;I thought I’d share an automation script I wrote that builds my Pelican site, asks for a commit message, then pushes it to github pages. This script assumes &lt;a href="https://packages.ubuntu.com/focal/zenity"&gt;zenity&lt;/a&gt; is installed on the system. If not, easily install&amp;nbsp;via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update
sudo apt install zenity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I would highly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I thought I’d share an automation script I wrote that builds my Pelican site, asks for a commit message, then pushes it to github pages. This script assumes &lt;a href="https://packages.ubuntu.com/focal/zenity"&gt;zenity&lt;/a&gt; is installed on the system. If not, easily install&amp;nbsp;via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update
sudo apt install zenity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I would highly recommend setting up &lt;code&gt;ghp-import&lt;/code&gt; and this script assumes you have. Follow &lt;a href="https://opensource.com/article/19/5/run-your-blog-github-pages-python"&gt;these instructions&lt;/a&gt; if you  need to install/configure&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;Here’s the script, save it in the root directory of your pelican blog and make it &lt;a href="https://www.andrewcbancroft.com/blog/musings/make-bash-script-executable/"&gt;executable&lt;/a&gt;.&lt;/p&gt;
&lt;div class="numberLines highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# ========================================================================&lt;/span&gt;
&lt;span class="c1"&gt;# Automated script to build Pelican blog, ask for a commit message, then&lt;/span&gt;
&lt;span class="c1"&gt;#   push to github pages.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Requirement:&lt;/span&gt;
&lt;span class="c1"&gt;#   Assumes zenity is installed, ghp-import is installed, and&lt;/span&gt;
&lt;span class="c1"&gt;#       assumes github credentials are stored locally&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="c1"&gt;# Input user commit message&lt;/span&gt;
&lt;span class="nv"&gt;inputStr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;zenity --entry --title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Commit Message&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --text&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What is your commit message?&amp;quot;&lt;/span&gt; --width&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# If the canceled button is pressed, exit script&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Commit message was canceled, abandoning script&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# If the commit message is empty, exit script&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$inputStr&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="k"&gt;then&lt;/span&gt;    
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Commit message is empty, abandoning script&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="c1"&gt;# Else, run &lt;/span&gt;

    &lt;span class="c1"&gt;# Build the blog    &lt;/span&gt;
    pelican content -o output -s pelicanconf.py
    &lt;span class="c1"&gt;# collect and push the blog output folder to github pages&lt;/span&gt;
    &lt;span class="c1"&gt;#  in a branch called &amp;#39;master&amp;#39;&lt;/span&gt;
    ghp-import -m &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$inputStr&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --no-jekyll -b master output
    git push origin master
    &lt;span class="c1"&gt;# save the &amp;quot;non-compiled&amp;quot; files of blog and push to a&lt;/span&gt;
    &lt;span class="c1"&gt;#  branch called &amp;#39;content&amp;#39;&lt;/span&gt;
    git add .
    git reset output plugins __pycache__
    git commit -m &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$inputStr&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    git push origin content
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A zenity input box is used to capture the commit&amp;nbsp;message. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Zenity Input Box" src="/images/2020/pelicanGithub-01.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican content -o output -s publishconf.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is your &lt;a href="https://docs.getpelican.com/en/stable/publish.html"&gt;standard command&lt;/a&gt; for generating and deploying a pelican blog. This next line is where things get&amp;nbsp;interesting. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ghp-import -m &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$inputStr&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --no-jekyll -b master output
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command is saying, “take the contents of the folder ‘/output’, add to the master branch, make the commit message what you typed into the input box&amp;#8221;. Then push the local master branch to the remote repo. I am assuming you have already locally cached your github credentials so you don&amp;#8217;t need to enter them, &lt;a href="https://help.github.com/en/github/using-git/caching-your-github-password-in-git"&gt;[1]&lt;/a&gt; and &lt;a href="https://git-scm.com/docs/git-credential-store"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add .
git reset output/* plugins/* __pycache__/*
git commit -m &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$inputStr&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
git push origin content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This last bit is a little tricky. First, I want to add everything in my blog folder then remove from staging the output folder (which I’m already pushing to the master branch), the plugin folder, and the __pycache__ folder. You can also accomplish this with a .gitignore file. Next, commit and push the ‘source’ files or all my non-generated pages to the content branch and push to the remote repo. This way I can host my html generated files as a website on github pages but I can also store/backup my source files. This prevents the need to have multiple repositories, one for hosting the blog and one for backing up the&amp;nbsp;files. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Example Github Repository" src="/images/2020/pelicanGithub-02.png"&gt;&lt;/p&gt;
&lt;p&gt;In your &lt;name&gt;github.io repository, click the branch button and you will see the &lt;code&gt;master&lt;/code&gt; which is default and contains the generated html files. You can also click the &lt;code&gt;content&lt;/code&gt; branch and see your source&amp;nbsp;files.&lt;/p&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="Pelican"></category></entry><entry><title>Converting Audible .aax Audiobook Files Into .mp3 on Ubuntu</title><link href="http://www.joelotz.com/blog/2020/converting-audible-aax-audiobook-files-into-mp3-on-ubuntu.html" rel="alternate"></link><published>2020-05-15T00:00:00+05:30</published><updated>2020-05-15T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-05-15:/blog/2020/converting-audible-aax-audiobook-files-into-mp3-on-ubuntu.html</id><summary type="html">&lt;p&gt;I have a bunch of audio-books on Audible.com that I’ve collected in the past year or two. I’ve been meaning to cancel my monthly subscription but I don’t get around to it, which leads to more monthly credits, and then I don’t want to cancel …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a bunch of audio-books on Audible.com that I’ve collected in the past year or two. I’ve been meaning to cancel my monthly subscription but I don’t get around to it, which leads to more monthly credits, and then I don’t want to cancel and lose those unused credits…or lose the books I haven’t listed to. It’s a brilliant ploy on Audible’s part to keep their customers. So there’s the problem, I want to part ways and cancel my monthly subscription but I don’t want to lose the books that I’ve already paid for, both listened to and&amp;nbsp;not. &lt;/p&gt;
&lt;p&gt;What I learned from googling around it that you convert the audible .aax audiobook files into other formats with &lt;a href="https://ffmpeg.org/"&gt;FFmpeg&lt;/a&gt; (&lt;a href="/tag/ffmpeg.html"&gt;one of my favorites!&lt;/a&gt;), but you have to have your unique “activation bytes” to decode the &lt;span class="caps"&gt;DRM&lt;/span&gt;. &lt;em&gt;That&lt;/em&gt; is the tricky part. I found a couple of solutions that work great for other people but didn’t work for me with my unique hardware, configuration, situation, etc. I believe people when they say it works, it just didn’t work for me. I spent all day coming up with a solution. I tried &lt;a href="https://github.com/naueramant/Audiblex"&gt;Audiblex&lt;/a&gt;, &lt;a href="https://github.com/paladini/aax2mp3-easy"&gt;AAXtoMP3-easy&lt;/a&gt;, audible-activator, and others, and finally the one that worked for me was &lt;a href="https://github.com/inAudible-NG/tables"&gt;inAudible-&lt;span class="caps"&gt;NG&lt;/span&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I won’t go into the long and torrid details of the failures, but rather describe the path for&amp;nbsp;success. &lt;/p&gt;
&lt;p&gt;First, log into www.audible.com and download one of your audio-books. Login, go to Library, click Download, save the file. Next, you will need to determine the &lt;a href="https://en.wikipedia.org/wiki/Secure_Hash_Algorithms"&gt;&lt;span class="caps"&gt;SHA&lt;/span&gt; sum&lt;/a&gt; of one of your .aax files that you downloaded. Of course, you will need to have FFMpeg&amp;nbsp;installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffprobe &amp;lt;inputfile.aax&amp;gt;

&lt;span class="c1"&gt;# Example&lt;/span&gt;
ffprobe TheGrapesofWrath.aax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Example of ffprobe" src="/images/2020/audibleConvert-01.png"&gt;&lt;/p&gt;
&lt;p&gt;After all the stupid library declarations you’ll see the line &lt;code&gt;[aax] file checksum&lt;/code&gt; and you want to copy that key that I circled in the image above. This is your checksum that is the input to RainbowCrack. &lt;a href="http://project-rainbowcrack.com/"&gt;RainbowCrack&lt;/a&gt; is a hash cracking program that uses &lt;a href="https://en.wikipedia.org/wiki/Rainbow_table"&gt;rainbow tables&lt;/a&gt; to decrypt… &lt;a href="https://en.wikipedia.org/wiki/Password_cracking"&gt;passwords&lt;/a&gt; and stuff. We will be using it decrypt this hash and tell us our Audible&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Follow the instructions on &lt;a href="https://github.com/inAudible-NG/tables"&gt;inAudible-&lt;span class="caps"&gt;NG&lt;/span&gt; github&lt;/a&gt; and download the zip or clone into a directory. Then go into the tables directory where the script is located and run the crack on the checksum you found using ffprobe &lt;code&gt;./rcrack . h &amp;lt;your checksum here&amp;gt;&lt;/code&gt;. After 2-3secs out pops the magic&amp;nbsp;number.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# For example &lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads/
git clone https://github.com/inAudible-NG/tables.git
&lt;span class="nb"&gt;cd&lt;/span&gt; tables/
./rcrack . h 123456789abcdef123456789abcdef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Example of Using rcrack" src="/images/2020/audibleConvert-02.png"&gt;&lt;/p&gt;
&lt;p&gt;It’s all gravy from here now that you have your unique code, you can remove the &lt;span class="caps"&gt;DRM&lt;/span&gt; from your audiobook files and decode into other other formats like mp3, mp4, m4a, m4b, flac, ogg, opus, etc, etc, etc. Note that the files you downloaded are hashed with your specific account, so it’s not like you can use my numbers, but I did obfuscate them in the images just in&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;You can use FFmpeg directly or some library front-end. I like the idea of a front-end because they most likely offer a variety of options, ease of use, and efficiency mastery that I would probably not know of. I found &lt;a href="https://github.com/KrumpetPirate/AAXtoMP3"&gt;AAXtoMP3&lt;/a&gt; very robust, easy to use, and useful - ymmv. It is simply a bash script with useful FFmpeg calls. The author has a fun “Do What the Fuck You Want To” &lt;a href="https://github.com/KrumpetPirate/AAXtoMP3/blob/master/LICENSE"&gt;Public License&lt;/a&gt;. I had a bunch of .aax files to decode and I also wanted multiple outputs for archiving (.flac, .mp3, .m4a chapters) so that I wouldn’t have to come back and do it again in the future. The solution was a simply bash script that looped through each .aax file and made multiple calls to AAXtoMP3. Here’s my&amp;nbsp;batch-script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; file in *.aax&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    bash AAXtoMP3 -e:mp3 &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; 
    bash AAXtoMP3 --flac &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; 
    bash AAXtoMP3 -e:m4a --chaptered &lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Extras&lt;/h3&gt;
&lt;p&gt;I have an 8-core &lt;span class="caps"&gt;CPU&lt;/span&gt; and there is no use in making it wait for each thread to process. We can call multiple decoding processes at once to each run on a single core…get it? That is what the “&amp;amp;” in the script above is doing. It says ‘start this process thread in the background and move on’, which the script then starts another decoding process, and another, and then loops around to grab a different file then starts another decoding process, until all the &lt;span class="caps"&gt;CPU&lt;/span&gt; cores are&amp;nbsp;full. &lt;/p&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="FFmpeg"></category></entry><entry><title>Running FreeFileSync Backup from Crontab on Ubuntu</title><link href="http://www.joelotz.com/blog/2020/running-freefilesync-backup-from-crontab-on-ubuntu.html" rel="alternate"></link><published>2020-05-08T00:00:00+05:30</published><updated>2020-05-08T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-05-08:/blog/2020/running-freefilesync-backup-from-crontab-on-ubuntu.html</id><summary type="html">&lt;p&gt;It took me half a day, maybe 4 hours, to solve this problem and I want to document the solution. I wanted to use &lt;a href="https://www.linux-magazine.com/Online/Features/FreeFileSync/(offset)/3"&gt;FreeFileSync&lt;/a&gt; to backup all my files to an external hard drive. I looked at &lt;a href="https://www.capterra.com/file-sync-software/"&gt;a bunch of other software&lt;/a&gt; but what I want to do is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It took me half a day, maybe 4 hours, to solve this problem and I want to document the solution. I wanted to use &lt;a href="https://www.linux-magazine.com/Online/Features/FreeFileSync/(offset)/3"&gt;FreeFileSync&lt;/a&gt; to backup all my files to an external hard drive. I looked at &lt;a href="https://www.capterra.com/file-sync-software/"&gt;a bunch of other software&lt;/a&gt; but what I want to do is pretty basic and everything else was too complicated for me. Regardless, I installed &lt;a href="https://freefilesync.org/"&gt;FreeFileSync&lt;/a&gt;, setup the configuration, and saved the “batch job”. Everything works smooth when manually run, but of course I want to automate the process and setup a cron&amp;nbsp;job. &lt;/p&gt;
&lt;p&gt;I kept getting error messages. Many solutions suggested to use gnome-schedule but that appears to be defunct and no longer available for Ubuntu 20.04. I went down the path of trying to build it from source and yadda yadda. That wasted some time. Another error message I got was &lt;code&gt;Failed to load module canberra-gtk-module&lt;/code&gt; - which was easily&amp;nbsp;fixed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install libcanberra-gtk3-module
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The error that really stumped me was &lt;code&gt;Error: Unable to initialize GTK+, is DISPLAY set properly?&lt;/code&gt; After much googling the answer always headed into setting the &lt;span class="caps"&gt;DISPLAY&lt;/span&gt; variable but the solution of setting it to 0 or 0.0 wasn’t working. Maybe it was because I have two monitors, I really don’t know. Again, I don’t understand the details or why it works, but setting the &lt;span class="caps"&gt;DISPLAY&lt;/span&gt; to 1.0 worked for&amp;nbsp;me. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; * * * env &lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;:1.0 /usr/bin/FreeFileSync/FreeFileSync /home/joe/FreeFileSyncBackup/SyncSettings.ffs_batch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 3 * * *&lt;/code&gt; is the frequency that I want the cron to run, every night at&amp;nbsp;3am&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/bin/FreeFileSync/FreeFileSync&lt;/code&gt; is the location of the&amp;nbsp;program &lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/joe/FreeFileSyncBackup/SyncSettings.ffs_batch&lt;/code&gt; is my batch file that I created and saved within the FreeFileSync&amp;nbsp;program&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Extras&lt;/h3&gt;
&lt;p&gt;In case you don’t know, &lt;code&gt;crontab -e&lt;/code&gt; opens the file allowing you to add or edit the user-level cron jobs. Also, you can specify your editor as &lt;code&gt;EDITOR=gedit crontab -e&lt;/code&gt; if you don’t want to use vi or nano or whatever is your default bash&amp;nbsp;editor. &lt;/p&gt;
&lt;p&gt;I was also successful in putting this command in a shell script and running the shell script from cron - just in case you want to do something more&amp;nbsp;complicated. &lt;/p&gt;
&lt;h3&gt;Update&lt;/h3&gt;
&lt;p&gt;When this script ran I received errors about “Unable to find or create trash directory.” Googling it looked like I was missing the trash dir &lt;code&gt;.Trash-1000&lt;/code&gt; but that wasn’t the case. In the end, for some reason, it seems like only root can delete files from my external &lt;span class="caps"&gt;NTFS&lt;/span&gt; drive….but it worked when I performed the delete manually or from the program. To get around this I moved the above cron job from my user to root crontab via &lt;code&gt;sudo EDITOR=gedit crontab -e&lt;/code&gt;. I am not sure if it’s a good idea to be running this as root…I’ll do more experiments and try to find a better&amp;nbsp;solution.&lt;/p&gt;</content><category term="misc"></category><category term="Ubuntu"></category></entry><entry><title>Downloading Music from Youtube with youtube-dl on Ubuntu</title><link href="http://www.joelotz.com/blog/2020/downloading-music-from-youtube-with-youtube-dl-on-ubuntu.html" rel="alternate"></link><published>2020-05-01T00:00:00+05:30</published><updated>2020-05-01T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-05-01:/blog/2020/downloading-music-from-youtube-with-youtube-dl-on-ubuntu.html</id><summary type="html">&lt;p&gt;I got bluetooth headphones for running since my old wired headphones were falling apart. I don’t need anything super-high quality since these are for running and I’ll be huffing and puffing - so I got what was available in India - &lt;a href="https://in.jbl.com/JBL+Endurance+DIVE.html"&gt;&lt;span class="caps"&gt;JBL&lt;/span&gt; Endurance Dive&lt;/a&gt;. I currently jog with my phone …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got bluetooth headphones for running since my old wired headphones were falling apart. I don’t need anything super-high quality since these are for running and I’ll be huffing and puffing - so I got what was available in India - &lt;a href="https://in.jbl.com/JBL+Endurance+DIVE.html"&gt;&lt;span class="caps"&gt;JBL&lt;/span&gt; Endurance Dive&lt;/a&gt;. I currently jog with my phone playing Amazon Music, so I was going to bluetooth to my phone until I get a small bluetooth player like the &lt;a href="https://www.amazon.com/SanDisk-SDMX28-016G-G46K-Sport-Player-Black/dp/B01LW2F237/r"&gt;SanDisk Clip Sport Plus&lt;/a&gt;. &lt;span class="caps"&gt;BUT&lt;/span&gt;, the &lt;span class="caps"&gt;JBL&lt;/span&gt; headphones have a built-in mp3 player with &lt;span class="caps"&gt;1GB&lt;/span&gt; storage, so no external player needed! Of course, this is not the highest quality, but like I said I’m just&amp;nbsp;running.&lt;/p&gt;
&lt;p&gt;The next challenge is getting music for the player. I’m streaming music and don’t &lt;em&gt;necessarily&lt;/em&gt; want to torrent. After a short time searching I found a cross-platform utility named &lt;a href="https://github.com/ytdl-org/youtube-dl/blob/master/README.md"&gt;youtube-dl&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://linoxide.com/linux-how-to/install-use-youtube-dl-ubuntu/"&gt;https://linoxide.com/linux-how-to/install-use-youtube-dl-ubuntu/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install youtube-dl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that it is installed, I recommend installing FFmpeg also. This is pretty simple, as described in this &lt;a href="https://linuxconfig.org/ubuntu-20-04-ffmpeg-installation"&gt;tutorial instructions&lt;/a&gt;. This is just a very useful utility to have and I use a bunch for transcoding video&amp;nbsp;formats.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install ffmpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have chosen a youtube video, you can list all available audio/video formats and bitrates. Note, replace &lt;id&gt; with the actual &lt;span class="caps"&gt;ID&lt;/span&gt; of the video you want. Better yet, just copy/past the entire &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;youtube-dl -F https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I run this command on the video “yYzrSGRzttk”, I see a whole list of audio and video files that are available. The first four; &lt;span class="caps"&gt;ID&lt;/span&gt;# 249, 250, 251, 140 are audio. The first three are in &lt;a href="https://en.wikipedia.org/wiki/WebM"&gt;webm&lt;/a&gt; format and the last is &lt;a href="https://en.wikipedia.org/wiki/MPEG-4_Part_14#.MP4_versus_.M4A"&gt;m4a&lt;/a&gt;, both are optimized for delivering on the web. 
&lt;img alt="youtube-dl" src="/images/2020/youtube-dl.png"&gt;
You can select the specific stream you want and download&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;youtube-dl -f &lt;span class="m"&gt;278&lt;/span&gt; https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;yYzrSGRzttk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The better method is to let youtube-dl choose the best audio stream and download&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://stackoverflow.com/questions/49804874/download-the-best-quality-audio-file-with-youtube-dl"&gt;https://stackoverflow.com/questions/49804874/download-the-best-quality-audio-file-with-youtube-dl&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;youtube-dl -f bestaudio https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can specify the name of the downloaded&amp;nbsp;file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;youtube-dl -f bestaudio https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;id&amp;gt; --output &lt;span class="s2"&gt;&amp;quot;outputName.%(ext)s&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With FFmpeg installed, you can also convert to mp3. I know converting formats probably degrade the audio quality, but my cheap headphone mp3 player doesn’t play the webm file&amp;nbsp;format. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;youtube-dl -x --audio-format mp3 https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then finally, you can download, convert to mp3, and rename the&amp;nbsp;file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;youtube-dl -x --audio-format mp3 https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;id&amp;gt; --output &lt;span class="s2"&gt;&amp;quot;outputName.%(ext)s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Audacity to Clean&amp;nbsp;Up&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install audacity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://askubuntu.com/questions/246242/how-to-normalize-sound-in-mp3-files"&gt;https://askubuntu.com/questions/246242/how-to-normalize-sound-in-mp3-files&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The audio files downloaded from the web probably have different loudness levels which can be undesirable. You can run a normalize and clean up batch process to all the downloaded&amp;nbsp;folder. &lt;/p&gt;
&lt;p&gt;Select “Tools &amp;gt;&amp;nbsp;Macros…”&lt;/p&gt;
&lt;p&gt;&lt;img alt="Audacity Macro - Normalize Levels" src="/images/2020/audacity_macros.png"&gt;&lt;/p&gt;
&lt;p&gt;Make sure the macro “&lt;span class="caps"&gt;MP3&lt;/span&gt; Conversion” is selected, then click “Files…”. This will open up a standard file browser where you can shift/select all the mp3 files you want to&amp;nbsp;normalize. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Audacity Macro - MP3 Conversion" src="/images/2020/audacity_macros2.png"&gt;&lt;/p&gt;
&lt;p&gt;Then the magic happens! The modified files will be in a new folder named&amp;nbsp;“macro-output”.&lt;/p&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="FFmpeg"></category></entry><entry><title>Extracting wav Audio File from mp4 Video with FFmpeg in Ubuntu</title><link href="http://www.joelotz.com/blog/2020/extracting-wav-audio-file-from-mp4-video-with-ffmpeg-in-ubuntu.html" rel="alternate"></link><published>2020-04-24T00:00:00+05:30</published><updated>2020-04-24T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-04-24:/blog/2020/extracting-wav-audio-file-from-mp4-video-with-ffmpeg-in-ubuntu.html</id><summary type="html">&lt;p&gt;In a &lt;a href="https://joelotz.github.io/converting-mp4-videos-to-mov-with-ffmpeg.html"&gt;previous post&lt;/a&gt; I showed a work-around for importing H.264 mp4 files into the free Linux version of Davinci Resolve 16 (&lt;span class="caps"&gt;DR16&lt;/span&gt;). For many reasons, I made the decision to purchase the full Studio version. This lets me directly import mp4 videos &lt;u&gt;but&lt;/u&gt;, the audio still doesn’t …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In a &lt;a href="https://joelotz.github.io/converting-mp4-videos-to-mov-with-ffmpeg.html"&gt;previous post&lt;/a&gt; I showed a work-around for importing H.264 mp4 files into the free Linux version of Davinci Resolve 16 (&lt;span class="caps"&gt;DR16&lt;/span&gt;). For many reasons, I made the decision to purchase the full Studio version. This lets me directly import mp4 videos &lt;u&gt;but&lt;/u&gt;, the audio still doesn’t work. Linux &lt;span class="caps"&gt;DR16&lt;/span&gt; doesn’t import &lt;span class="caps"&gt;AAC&lt;/span&gt; audio. I read on the BlackMagic forums that it is a licensing&amp;nbsp;thing. &lt;/p&gt;
&lt;p&gt;&lt;img alt="DR16 Input Codecs" src="/images/2020/DR16_InputAudio.png"&gt;&lt;/p&gt;
&lt;p&gt;Since we are on Ubuntu and are comfortable with the command line and scripts…right??… we can just use ffmpeg to pop us out a &lt;span class="caps"&gt;PCM&lt;/span&gt; encoded .wav file that can be imported into the &lt;span class="caps"&gt;DR16&lt;/span&gt; timeline and linked to the&amp;nbsp;clip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg -i input.mp4 -acodec pcm_s16le -ac &lt;span class="m"&gt;1&lt;/span&gt; -ar &lt;span class="m"&gt;16000&lt;/span&gt; input_audio.wav
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You could also turn this into a Nautilus shell script and run it by right-clicking on an .mp4 file, the &lt;a href="https://joelotz.github.io/running-shell-scripts-on-files-from-nautilus.html"&gt;instructions are here&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="FFmpeg"></category><category term="GoPro"></category><category term="Davinci Resolve 16"></category></entry><entry><title>Converting mp4 to Animated gif with FFmpeg in Ubuntu</title><link href="http://www.joelotz.com/blog/2020/converting-mp4-to-animated-gif-with-ffmpeg-in-ubuntu.html" rel="alternate"></link><published>2020-04-17T00:00:00+05:30</published><updated>2020-04-17T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-04-17:/blog/2020/converting-mp4-to-animated-gif-with-ffmpeg-in-ubuntu.html</id><summary type="html">&lt;p&gt;Source is from an &lt;a href="https://superuser.com/questions/556029/how-do-i-convert-a-video-to-gif-using-ffmpeg-with-reasonable-quality"&gt;excellent answer&lt;/a&gt; on SuperUser&amp;nbsp;StackExchange.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg input.mp4 -vf &lt;span class="s2"&gt;&amp;quot;fps=15,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse&amp;quot;&lt;/span&gt; -loop &lt;span class="m"&gt;0&lt;/span&gt; output.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can define the frames per second via the ”fps” argument. The standard for an animated gif is &lt;a href="https://www.bluefrogdm.com/blog/best-practices-for-creating-animated-gifs"&gt;between 15 and 24 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Source is from an &lt;a href="https://superuser.com/questions/556029/how-do-i-convert-a-video-to-gif-using-ffmpeg-with-reasonable-quality"&gt;excellent answer&lt;/a&gt; on SuperUser&amp;nbsp;StackExchange.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg input.mp4 -vf &lt;span class="s2"&gt;&amp;quot;fps=15,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse&amp;quot;&lt;/span&gt; -loop &lt;span class="m"&gt;0&lt;/span&gt; output.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can define the frames per second via the ”fps” argument. The standard for an animated gif is &lt;a href="https://www.bluefrogdm.com/blog/best-practices-for-creating-animated-gifs"&gt;between 15 and 24&lt;/a&gt;, but the more frames the larger the output&amp;nbsp;file. &lt;/p&gt;
&lt;p&gt;The split commands splits the video into two streams for generate a color palette and downsampling the incoming&amp;nbsp;video. &lt;/p&gt;
&lt;p&gt;The loop argument defines how many times you want the gif to loop.
- 1 = no looping
- 1 = loop once
- n = loop n times
- 0 = loop infinite =&amp;nbsp;“forever”&lt;/p&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="FFmpeg"></category></entry><entry><title>Running Shell Scripts on Files from Nautilus File Manager</title><link href="http://www.joelotz.com/blog/2020/running-shell-scripts-on-files-from-nautilus-file-manager.html" rel="alternate"></link><published>2020-04-10T00:00:00+05:30</published><updated>2020-04-10T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-04-10:/blog/2020/running-shell-scripts-on-files-from-nautilus-file-manager.html</id><summary type="html">&lt;p&gt;In a &lt;a href="converting-mp4-to-mov-with-ffmpeg-in-ubuntu.html"&gt;previous post&lt;/a&gt; I wrote a script to transcode a video in an mp4 container to mov container. It would be really cool to simply right-click on the file and run the script. &lt;a href="https://askubuntu.com/questions/1031807/how-to-integrate-run-as-shell-script-in-right-click-menu-of-file-manager"&gt;AskUbuntu&lt;/a&gt; had a decent guide that explained&amp;nbsp;how.&lt;/p&gt;
&lt;p&gt;First create a new file in the &lt;code&gt;/.local …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In a &lt;a href="converting-mp4-to-mov-with-ffmpeg-in-ubuntu.html"&gt;previous post&lt;/a&gt; I wrote a script to transcode a video in an mp4 container to mov container. It would be really cool to simply right-click on the file and run the script. &lt;a href="https://askubuntu.com/questions/1031807/how-to-integrate-run-as-shell-script-in-right-click-menu-of-file-manager"&gt;AskUbuntu&lt;/a&gt; had a decent guide that explained&amp;nbsp;how.&lt;/p&gt;
&lt;p&gt;First create a new file in the &lt;code&gt;/.local/share/nautilus/scripts/&lt;/code&gt; folder using vi, gedit, or your favorite text&amp;nbsp;editor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.local/share/nautilus/scripts/
gedit &amp;lt;name of script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, of course, make the script&amp;nbsp;executable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chmod +x ~/.local/share/nautilus/scripts/&amp;lt;name of script.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Writing the Video Transcode Script with&amp;nbsp;FFMpeg&lt;/h3&gt;
&lt;p&gt;Here is the script I wrote, encorporating the ffmpeg command from the previous post. The variables allow the output file to be the same size/resolution as the input file. Depending on the size of the file it could take some time, so I added a zenity popup box so you have to install zenity (&lt;code&gt;sudo apt install zenity&lt;/code&gt;) or comment out the pop-ups. It may be useful to add an progress-box for the&amp;nbsp;future…&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;## assumes FFPMEG is installed&lt;/span&gt;
&lt;span class="c1"&gt;## converts a mp4 vidoe file to mov container in order ot use in DVR&lt;/span&gt;

&lt;span class="c1"&gt;# strip new line char passed by Nautilus&lt;/span&gt;
&lt;span class="nv"&gt;FILENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$NAUTILUS_SCRIPT_SELECTED_FILE_PATHS&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;&amp;#39;s/\r//g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#convert to lowercase in order to check extension...i can&amp;#39;t work the lowercase into the logic below so this is a work around&lt;/span&gt;
&lt;span class="nv"&gt;FILENAME2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILENAME&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#check to see if file ends with .mp4&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILENAME2&lt;/span&gt;&lt;span class="p"&gt;: -4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.mp4&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;# cut off the extension and rename to file.mov&lt;/span&gt;
    &lt;span class="nv"&gt;FILENAME3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FILENAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -f &lt;span class="m"&gt;1&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; 
    &lt;span class="nv"&gt;NEWFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILENAME3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mov&amp;quot;&lt;/span&gt;


    &lt;span class="c1"&gt;# determined width and height of the video&lt;/span&gt;
    &lt;span class="c1"&gt;# the assumption is the output file is desired to be the same same as input &lt;/span&gt;
    &lt;span class="nv"&gt;WIDTH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ffprobe -v error -show_entries &lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;width -of &lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;noprint_wrappers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;:nokey&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILENAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;HEIGHT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ffprobe -v error -show_entries &lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;height -of &lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;noprint_wrappers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;:nokey&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILENAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;FRAMERATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ffprobe -v error -select_streams v:0 -show_entries &lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;avg_frame_rate -of &lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;noprint_wrappers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;:nokey&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILENAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# this is the processing magic, notice I use the original FILENAME variable due to my goofy hack&lt;/span&gt;
    &lt;span class="c1"&gt;# https://askubuntu.com/questions/907398/how-to-convert-a-video-with-ffmpeg-into-the-dnxhd-dnxhr-format&lt;/span&gt;
    ffmpeg -i &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILENAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -c:v dnxhd -profile:v dnxhr_hqx -vf &lt;span class="s2"&gt;&amp;quot;scale=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WIDTH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HEIGHT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,fps=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FRAMERATE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,format=yuv422p10le&amp;quot;&lt;/span&gt; -c:a pcm_s16le &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NEWFILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# finished message box&lt;/span&gt;
    zenity --info --title &lt;span class="s2"&gt;&amp;quot;Procesing completed&amp;quot;&lt;/span&gt; --text &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILENAME3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mp4 has been transcoded to a .mov file at size &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WIDTH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HEIGHT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and framerate=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FRAMERATE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --width&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;600&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="c1"&gt;# it does not end in .mp4 so do not process&lt;/span&gt;
    zenity --error --title &lt;span class="s2"&gt;&amp;quot;This is not an .mp4 file&amp;quot;&lt;/span&gt; --text &lt;span class="s2"&gt;&amp;quot;File must end with extension &amp;#39;.mp4&amp;#39;&amp;quot;&lt;/span&gt; --width&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;600&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="bash"></category></entry><entry><title>Converting png Images to a Custom pdf with ImageMagick in Ubuntu</title><link href="http://www.joelotz.com/blog/2020/converting-png-images-to-a-custom-pdf-with-imagemagick-in-ubuntu.html" rel="alternate"></link><published>2020-04-03T00:00:00+05:30</published><updated>2020-04-03T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-04-03:/blog/2020/converting-png-images-to-a-custom-pdf-with-imagemagick-in-ubuntu.html</id><summary type="html">&lt;h3&gt;Installing ImageMagick on Ubuntu&amp;nbsp;20.04&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update
sudo apt build-essential checkinstall &lt;span class="c1"&gt;# provides all the libraris for compiling&lt;/span&gt;
sudo apt build-dep imagemagick &lt;span class="c1"&gt;# install compilation dependencies&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first time I did this installation the program complained and errored that it was missing &lt;a href="http://www.imagemagick.org/download/delegates/"&gt;delegates&lt;/a&gt; when I tried to manipulate the png …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Installing ImageMagick on Ubuntu&amp;nbsp;20.04&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update
sudo apt build-essential checkinstall &lt;span class="c1"&gt;# provides all the libraris for compiling&lt;/span&gt;
sudo apt build-dep imagemagick &lt;span class="c1"&gt;# install compilation dependencies&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first time I did this installation the program complained and errored that it was missing &lt;a href="http://www.imagemagick.org/download/delegates/"&gt;delegates&lt;/a&gt; when I tried to manipulate the png images. &lt;a href="https://askubuntu.com/questions/745660/imagemagick-png-delegate-install-problems"&gt;This page&lt;/a&gt; from StackExchange explained how to install the image libraries. I didn’t know which ones were important or how often they are used so I installed them&amp;nbsp;all.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install libx11-dev libxext-dev zlib1g-dev libpng12-dev libjpeg-dev libfreetype6-dev libxml2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should install all the needed image libraries. Unfortunately, ImageMagick itself can’t be installed the same way. We need to build&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;First download the binary tar, extract it, and move into the newly extracted&amp;nbsp;directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget https://www.imagemagick.org/download/ImageMagick.tar.gz
tar xf ImageMagick.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; ImageMagick-7*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While in the source code directory execute the &lt;code&gt;configure&lt;/code&gt; command. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;./configure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next compile with the &lt;code&gt;make&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install&amp;nbsp;ImageMagick.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will install the compiled binaries. Now run &lt;code&gt;ldconfig&lt;/code&gt; command to link the static&amp;nbsp;libraries. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo ldconfig /usr/local/lib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Confirm installation and final check. Run the &lt;code&gt;identity&lt;/code&gt; command to confirm that “something” is&amp;nbsp;installed. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;identify -version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://imagemagick.org/script/download.php"&gt;ImageMagick website&lt;/a&gt; also has a couple commands to verify&amp;nbsp;installation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;identify logo.gif
display logo.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Converting a Bunch of Images to a&amp;nbsp;pdf&lt;/h3&gt;
&lt;p&gt;I have a bunch of scan images of an old handwritten recipe book. The originals are in &lt;a href="https://en.wikipedia.org/wiki/Paper_size"&gt;A5 paper size&lt;/a&gt; and I’d like each page of the pdf to be the same size. This is pretty simple with ImageMagick’s &lt;code&gt;convert&lt;/code&gt; command. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ImageDir
convert *.png &lt;span class="se"&gt;\&lt;/span&gt;
    -resize 595x421 &lt;span class="se"&gt;\&lt;/span&gt;
    -background white &lt;span class="se"&gt;\&lt;/span&gt;
    -gravity North &lt;span class="se"&gt;\&lt;/span&gt;
    -extent 595x421 &lt;span class="se"&gt;\&lt;/span&gt;
    output.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, this is complicated and took a couple hours to figure out. So what is going on&amp;nbsp;here?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It’s converting all files in the current directory with the file type .png, so be careful. You can also specify the images explicitly by just listing them&amp;nbsp;out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The scanned images are high resolution and pretty big, something around 1200x900. I want to save and keep these but the size is too big. The &lt;code&gt;-resize&lt;/code&gt; option is sizing the images to imagemagick 595x421dpi. &lt;a href="https://imagemagick.org/script/command-line-options.php#page"&gt;This is the A5 page size (dots per inch) in&amp;nbsp;landscape.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-gravity&lt;/code&gt; &lt;a href="https://imagemagick.org/script/command-line-options.php#extent"&gt;must go before &lt;code&gt;-extent&lt;/code&gt;&lt;/a&gt;. You can find all the options for an argument using &lt;code&gt;identify -list &amp;lt;option&amp;gt;&lt;/code&gt;. “North” means center the images on the page horizontally and top-aligned&amp;nbsp;vertically. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-extent&lt;/code&gt; sets the image size. At &lt;a href="https://imagemagick.org/script/command-line-options.php#page"&gt;page size is dots per inch for A5&lt;/a&gt; is&amp;nbsp;421x595.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note: you can specify the dpi with the &lt;code&gt;-density&lt;/code&gt; option. The &lt;a href="https://imagemagick.org/script/command-line-options.php#density"&gt;default is 72dpi&lt;/a&gt; so I left it as&amp;nbsp;is. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Lower Res/ Smaller&amp;nbsp;File&lt;/h4&gt;
&lt;p&gt;You can make a lower resolution and smaller file size for web or&amp;nbsp;email.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert *.png -compress jpeg -resize 595x421 -background white &lt;span class="se"&gt;\&lt;/span&gt;
    -gravity North -extent 595x421 output.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Additional Output&amp;nbsp;Sizes&lt;/h3&gt;
&lt;p&gt;This is an update to the original post. I realized that my family in the &lt;span class="caps"&gt;US&lt;/span&gt; may want a version that can be printed in standard &lt;span class="caps"&gt;US&lt;/span&gt; Letter&amp;nbsp;sizes.&lt;/p&gt;
&lt;p&gt;612 x&amp;nbsp;792&lt;/p&gt;
&lt;h3&gt;Using Exiftool to Add pdf&amp;nbsp;Metadata&lt;/h3&gt;
&lt;p&gt;Easily install &lt;a href="https://exiftool.org/"&gt;Exiftool&lt;/a&gt; on&amp;nbsp;Ubuntu.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install libimage-exiftool-perl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are a bunch of &lt;a href="https://linoxide.com/linux-how-to/install-use-exiftool-linux-ubuntu-centos/"&gt;tutorials&lt;/a&gt; on using&amp;nbsp;Exiftool.&lt;/p&gt;
&lt;p&gt;Changing the exif data within the pdf file to add some fields is quite&amp;nbsp;easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;exiftool &lt;span class="se"&gt;\&lt;/span&gt;
    -Creator&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -keywords&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;recipebook;recipes&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -Author&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Grandma&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    output.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="ImageMagick"></category></entry><entry><title>Converting mp4 to mov with FFmpeg in Ubuntu</title><link href="http://www.joelotz.com/blog/2020/converting-mp4-to-mov-with-ffmpeg-in-ubuntu.html" rel="alternate"></link><published>2020-03-27T00:00:00+05:30</published><updated>2020-03-27T00:00:00+05:30</updated><author><name>Joe</name></author><id>tag:www.joelotz.com,2020-03-27:/blog/2020/converting-mp4-to-mov-with-ffmpeg-in-ubuntu.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; &lt;a href="running-shell-scripts-on-files-from-nautilus.html"&gt;Please see the post&lt;/a&gt; on how I turned this into a script that can be executed on a file by&amp;nbsp;right-clicking. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;GoPro outputs video in H.264 mp4 containers and the Hero6 and Hero7 now can output in the more efficient &lt;span class="caps"&gt;HVEC&lt;/span&gt; H.265 mp4 container. This is great …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; &lt;a href="running-shell-scripts-on-files-from-nautilus.html"&gt;Please see the post&lt;/a&gt; on how I turned this into a script that can be executed on a file by&amp;nbsp;right-clicking. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;GoPro outputs video in H.264 mp4 containers and the Hero6 and Hero7 now can output in the more efficient &lt;span class="caps"&gt;HVEC&lt;/span&gt; H.265 mp4 container. This is great&amp;nbsp;because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nearly everything can read and play H.264 mp4&amp;nbsp;files&lt;/li&gt;
&lt;li&gt;since the H.265 mp4 is more space efficient you can save even more video to your memory&amp;nbsp;card.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Yeah! But wait…. Not everything can read/play the new H.265&amp;nbsp;mp4.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;FYI&lt;/span&gt;, here are some great posts by havecamerawilltravel that you should&amp;nbsp;read:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://havecamerawilltravel.com/gopro/gopro-hero7-black-video-modes/"&gt;Hero7 Black&amp;nbsp;Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://havecamerawilltravel.com/gopro/convert-hevc-h265-video-codec/"&gt;How to Convert H.265 to H.264 in&amp;nbsp;Handbrake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My goal is to edit and color correct my home videos in Davinci Resolve 16 (&lt;span class="caps"&gt;DR16&lt;/span&gt;) but it turns out it doesn’t import these GoPro video files directly, at least not in the Linux free&amp;nbsp;version. &lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://documents.blackmagicdesign.com/SupportNotes/DaVinci_Resolve_16_Supported_Codec_List.pdf"&gt;support notes of &lt;span class="caps"&gt;DR16&lt;/span&gt;&lt;/a&gt; it states that&amp;nbsp;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS will read mp4 in both &lt;span class="caps"&gt;DR16&lt;/span&gt; (free version) and &lt;span class="caps"&gt;DR16&lt;/span&gt; Studio (paid&amp;nbsp;version)&lt;/li&gt;
&lt;li&gt;Windows will read mp4 in &lt;span class="caps"&gt;DR16&lt;/span&gt; Studio&amp;nbsp;only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt; will read mp4 in &lt;span class="caps"&gt;DR16&lt;/span&gt; Studio&amp;nbsp;only&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="DR16 Input Codecs" src="/images/2020/DR16_InputCodecs.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://handbrake.fr/"&gt;Handbrake&lt;/a&gt; is a &lt;span class="caps"&gt;GUI&lt;/span&gt; front-end to ffpmeg and is awesome, I’m sure it could do it but I wanted something that I could run from a shell script and I wasn’t exactly sure what it was doing under the hood. My goal was to preserve the highest resolution and quality during the conversion or “transcode” to work with in &lt;span class="caps"&gt;DR16&lt;/span&gt;. &lt;/p&gt;
&lt;h3&gt;Installing FFmpeg on Ubuntu&amp;nbsp;20.04&lt;/h3&gt;
&lt;p&gt;This is pretty simple, as described in this &lt;a href="https://linuxconfig.org/ubuntu-20-04-ffmpeg-installation"&gt;tutorial instructions&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install ffmpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Converting my Video from mp4 to&amp;nbsp;mov&lt;/h3&gt;
&lt;p&gt;In my research and experimentation I found success in two codecs; Apple &lt;a href="https://en.wikipedia.org/wiki/Apple_ProRes"&gt;ProRes&lt;/a&gt; and &lt;a href="Avid DNxHD"&gt;Avid DNxHD&lt;/a&gt;. You can view all the installed and available codecs on your machine with &lt;code&gt;ffmpeg -codecs&lt;/code&gt;. If you search through the long list you will see a bunch of H.264 decoders. I don’t know which ones are better or if they are, but I’ve seen these two used and recommended on the&amp;nbsp;interwebs. &lt;/p&gt;
&lt;p&gt;As I said, I tried both codecs and didn’t find any difference between the two. They both decoded high-res 4k video and converted &lt;a href="https://en.wikipedia.org/wiki/Advanced_Audio_Coding"&gt;&lt;span class="caps"&gt;AAC&lt;/span&gt;&lt;/a&gt; audio into &lt;a href="https://en.wikipedia.org/wiki/Pulse-code_modulation"&gt;&lt;span class="caps"&gt;PCM&lt;/span&gt;&lt;/a&gt; audio. I’ll tell you later why that’s important. The advantage of using ProRes is that the command line is a bit&amp;nbsp;easier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg -i input.mp4 -c:v prores -profile:v &lt;span class="m"&gt;3&lt;/span&gt; -c:a pcm_s16le output.mov
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The advantage of using DNxHD is that you can specify all the nerdy details if you want to, but that’s a double edge sword because you can’t leave them out and still work. You must specify all the nerdy&amp;nbsp;details. &lt;/p&gt;
&lt;p&gt;Here is the final command, assuming 4k resolution at 23.967 (aka 24)&amp;nbsp;fps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg -i input.mp4 &lt;span class="se"&gt;\&lt;/span&gt;
    -c:v dnxhd &lt;span class="se"&gt;\&lt;/span&gt;
    -profile:v dnxhr_hqx &lt;span class="se"&gt;\&lt;/span&gt;
    -vf &lt;span class="s2"&gt;&amp;quot;scale=3840:2160,fps=24000/1001,format=yuv422p10le&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -b:v 110M &lt;span class="se"&gt;\&lt;/span&gt;
    -c:a pcm_s16le &lt;span class="se"&gt;\&lt;/span&gt;
    output.mov
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Audio&amp;nbsp;Transcoding&lt;/h4&gt;
&lt;p&gt;Referring back to the &lt;a href="https://documents.blackmagicdesign.com/SupportNotes/DaVinci_Resolve_16_Supported_Codec_List.pdf"&gt;Black Magic Support Codecs&lt;/a&gt;, we see that mp3 and &lt;span class="caps"&gt;AAC&lt;/span&gt; are &lt;u&gt;not&lt;/u&gt; supported in either free nor Studio Linux version. That sucks…So this is why we have to convert the audio when we convert the&amp;nbsp;video.&lt;/p&gt;
&lt;p&gt;&lt;img alt="DR16_InputAudio" src="/media/joe/Working/Blog/content/images/2020/DR16_InputAudio.png"&gt;&lt;/p&gt;
&lt;h4&gt;FFmpeg&amp;nbsp;Options/Arguments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; defines the input&amp;nbsp;file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-c:v&lt;/code&gt; (or the alias &lt;code&gt;-vcodec&lt;/code&gt;) defines the codec to use for the&amp;nbsp;video&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;-profile:v&lt;/code&gt; defines the profile to use for the&amp;nbsp;video.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Accepted values are: &lt;code&gt;dnxhd&lt;/code&gt;, &lt;code&gt;dnxhr_444&lt;/code&gt;, &lt;code&gt;dnxhr_hqx&lt;/code&gt;, &lt;code&gt;dnxhr_hq&lt;/code&gt;, &lt;code&gt;dnxhr_sq&lt;/code&gt;, &lt;code&gt;dnxhr_lb&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I was able to convert 1920x1080 videos but kept getting an error when attempting 4k 3840x2160 videos. I was stuck at this point for a while until I found a post on &lt;a href="https://askubuntu.com/questions/907398/how-to-convert-a-video-with-ffmpeg-into-the-dnxhd-dnxhr-format"&gt;askubuntu&lt;/a&gt; explaining that a different profile was&amp;nbsp;needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dnxhd&lt;/code&gt;: The lists of available/possible resolutions can be &lt;a href="https://en.wikipedia.org/wiki/List_of_Avid_DNxHD_resolutions"&gt;looked up here&lt;/a&gt;, but they do not go bigger than&amp;nbsp;1080p.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5&gt;DNxHR&amp;nbsp;Profiles&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;DNxHR &lt;span class="caps"&gt;LB&lt;/span&gt;: &lt;code&gt;dnxhr_lb&lt;/code&gt; - Low Bandwidth. 8-bit 4:2:2 (&lt;code&gt;yuv422p&lt;/code&gt;). Offline&amp;nbsp;Quality.&lt;/li&gt;
&lt;li&gt;DNxHR &lt;span class="caps"&gt;SQ&lt;/span&gt;: &lt;code&gt;dnxhr_sq&lt;/code&gt; - Standard Quality. 8-bit 4:2:2 (&lt;code&gt;yuv422p&lt;/code&gt;). Suitable for delivery&amp;nbsp;format.&lt;/li&gt;
&lt;li&gt;DNxHR &lt;span class="caps"&gt;HQ&lt;/span&gt;: &lt;code&gt;dnxhr_hq&lt;/code&gt; - High Quality. 8-bit 4:2:2 (&lt;code&gt;yuv422p&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;DNxHR &lt;span class="caps"&gt;HQX&lt;/span&gt;: &lt;code&gt;dnxhr_hqx&lt;/code&gt; - High Quality. 10-bit 4:2:2 (&lt;code&gt;yuv422p10le&lt;/code&gt;). &lt;span class="caps"&gt;UHD&lt;/span&gt;/4K Broadcast-quality&amp;nbsp;delivery.&lt;/li&gt;
&lt;li&gt;DNxHR 444: &lt;code&gt;dnxhr_444&lt;/code&gt; - Finishing Quality. 10-bit 4:4:4 (&lt;code&gt;yuv444p10le&lt;/code&gt;). Cinema-quality&amp;nbsp;delivery.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above list was adapted from &lt;a href="https://en.wikipedia.org/wiki/DNxHR_codec"&gt;DNxHR codec&lt;/a&gt;. Note that the pix_format must match the&amp;nbsp;profile! &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-vf&lt;/code&gt; is as alias for &lt;code&gt;-filter:v&lt;/code&gt; and creates the filtergraph that is used to filter the stream. You can specify each value but this is easier, for example &lt;code&gt;-pix_fmt=yuv422p10le&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scale=&lt;/code&gt;width x&amp;nbsp;height &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fps=&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;23.967 = 24000/1001 (or use the alias &lt;code&gt;ntsc-film&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;29.97 = 30000/1001 (or use the alias &lt;code&gt;ntsc&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;59.94 =&amp;nbsp;60000/1001&lt;/li&gt;
&lt;li&gt;119.88 =&amp;nbsp;120000/1001&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pix_fmts=&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;dnxhr_lb&lt;/code&gt; , &lt;code&gt;dnxhr_sq&lt;/code&gt;, or &lt;code&gt;dnr_hq&lt;/code&gt; =&amp;nbsp;yuv422p&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;dnxhr_hqx&lt;/code&gt; or &lt;code&gt;dnxhr_444&lt;/code&gt;=&amp;nbsp;yuv422p10le&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-c:a&lt;/code&gt; defines the codec to use for the&amp;nbsp;audio&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="Ubuntu"></category><category term="FFmpeg"></category></entry></feed>